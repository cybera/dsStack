<!doctype html>
<html lang="en">

<head>
    <meta charset="utf-8" />
    <link rel="icon" type="image/png" href="images/cybera_icon.png">
    <meta http-equiv="X-UA-Compatible" content="IE=edge,chrome=1" />

    <title>dsStack</title>

    <meta name="description" content="Home page for Data Science Stack">

    <!--     Fonts and icons     -->
    <link rel="stylesheet" href="https://fonts.googleapis.com/icon?family=Material+Icons" />
    <link rel="stylesheet" type="text/css" href="https://fonts.googleapis.com/css?family=Roboto:300,400,500,700" />

    <link rel="stylesheet" href="https://maxcdn.bootstrapcdn.com/font-awesome/latest/css/font-awesome.min.css" as="font"
        onload="this.onload=null;this.rel='stylesheet'">

    <!-- CSS Files -->

    <link rel="stylesheet" href="https://cdnjs.cloudflare.com/ajax/libs/twitter-bootstrap/4.5.3/css/bootstrap.min.css"
        integrity="sha512-oc9+XSs1H243/FRN9Rw62Fn8EtxjEYWHXRvjS43YtueEewbS6ObfXcJNyohjHqVKFPoXXUxwc+q1K7Dee6vv9g=="
        crossorigin="anonymous" />

    <script src="https://code.jquery.com/jquery-3.5.1.js" crossorigin="anonymous"></script>
    <script src="https://ajax.googleapis.com/ajax/libs/jqueryui/1.12.0/jquery-ui.min.js" defer></script>
    <script src="https://cdnjs.cloudflare.com/ajax/libs/jquery-awesome-cursor/0.3.1/jquery.awesome-cursor.min.js"
        integrity="sha512-mR4OOU/ky22CpIhlxfBwQ2ckKWapf+g2+1sbUCkVtFaaRcVLpytf0ERgrXXUUYgFOdbehWOJJdW7QzYJ7XlLiA=="
        crossorigin="anonymous" defer></script>

    <!-- <script src="https://cdnjs.cloudflare.com/ajax/libs/popper.js/2.11.8/umd/popper.min.js" integrity="sha512-TPh2Oxlg1zp+kz3nFA0C5vVC6leG/6mm1z9+mA81MI5eaUVqasPLO8Cuk4gMF4gUfP5etR73rgU/8PNMsSesoQ==" crossorigin="anonymous" referrerpolicy="no-referrer"></script>
    <script src="https://cdnjs.cloudflare.com/ajax/libs/twitter-bootstrap/5.3.2/js/bootstrap.min.js" integrity="sha512-WW8/jxkELe2CAiE4LvQfwm1rajOS8PHasCCx+knHG0gBHt8EXxS6T6tJRTGuDQVnluuAvMxWF4j8SNFDKceLFg==" crossorigin="anonymous" referrerpolicy="no-referrer"></script> -->


    <script src="https://cdnjs.cloudflare.com/ajax/libs/popper.js/1.12.9/umd/popper.min.js"></script>
    <script src="https://cdnjs.cloudflare.com/ajax/libs/twitter-bootstrap/4.5.3/js/bootstrap.min.js"
        integrity="sha512-8qmis31OQi6hIRgvkht0s6mCOittjMa9GMqtK9hes5iEQBQE/Ca6yGE5FsW36vyipGoWQswBj/QBm2JR086Rkw=="
        crossorigin="anonymous"></script>

    <script src="/jstree-3.3.15/dist/jstree.js"></script>
    <link rel="stylesheet" href="/jstree-3.3.15/dist/themes/default/style.min.css">

    <script src="https://www.unpkg.com/ace-builds@latest/src-noconflict/ace.js"></script>

    <script src="//cdn.quilljs.com/1.3.7/quill.min.js"></script>
    <link href="//cdn.quilljs.com/1.3.7/quill.snow.css" rel="stylesheet">

    <link rel="stylesheet" href="/xterm/xterm.css" />
    <script src="/xterm/xterm.js"></script>
    <script src="/xterm/xterm-addon-fit.js"></script>

    <link rel="stylesheet" href="/clientCSS/index.css">

    <noscript>
        <link rel="stylesheet" href="/clientCSS/index.css">
    </noscript>

    <script type="text/javascript" language="javascript">

        $(document).ready(function () {
            var userID = "0"
            var userName = ""
            // var targets=[]

            //settings
            if (localStorage['settings']) {
                let settings = JSON.parse(localStorage['settings'])
                $("#settingsYourName").val(settings.settingsYourName)
                $("#settingsHostName1").val(settings.settingsHostName1)
                $("#settingsLoginName1").val(settings.settingsLoginName1)
                $("#settingsKey1").val(settings.settingsKey1)
                $("#userID").val(settings.userID)
                userID = settings.userID
                userName = settings.settingsYourName

            } else {
                $('#newUserModal').modal('show')
                // $('#newUserModal').on('hidden.bs.modal', function () {
                //     if (!localStorage['settings']) {
                //         $.get('/newUser', function (dataObj) {
                //             userID = dataObj.userID
                //             localStorage['settings'] = JSON.stringify({ "userID": userID })
                //             $('#jstree_div').jstree('select_node', 'ul > li:first')
                //         })
                //     }
                // })
            }
            $("#settingsBtn").on("click", function () {
                $('#settingsModal').modal('show');

                $("#settingMsg").text("")
                $("#uploadFile").val("")
                $("#uploadFileLine").css({ "display": "none" })
            })
            $("#settingsSaveButton").on("click", function () {

                let settings =
                {
                    "settingsYourName": $("#settingsYourName").val(),
                    // "targets": targets,
                    "settingsHostName1": $("#settingsHostName1").val(),
                    "settingsLoginName1": $("#settingsLoginName1").val(),
                    "settingsKey1": $("#settingsKey1").val(),
                    "userID": $("#userID").val()
                }

                localStorage['settings'] = JSON.stringify(settings)
                userID = settings.userID
                userName = settings.settingsYourName
            })

            $("#alertBtn").on("click", function () {
                $('#alertModal').modal('show');
            })
            var scriptEditor = ace.edit("comp-script", {
                theme: "ace/theme/textmate",
                mode: "ace/mode/sh",
                value: ""
            });

            scriptEditor.setTheme("ace/theme/clouds");
            scriptEditor.session.setMode("ace/mode/sh");
            scriptEditor.setReadOnly(true);

            var scriptEditorBackup = ace.edit("comp-script-backup", {
                theme: "ace/theme/textmate",
                mode: "ace/mode/sh",
                value: ""
            });

            scriptEditorBackup.setTheme("ace/theme/clouds");
            scriptEditorBackup.session.setMode("ace/mode/sh");
            scriptEditorBackup.setReadOnly(true);

            var term = new Terminal({
                fontSize: 14,
                cols: 200,
                fontFamily: 'Ubuntu Mono, courier-new, courier, monospace',
            });

            const fitAddon = new FitAddon.FitAddon();
            term.loadAddon(fitAddon);

            term.open(document.getElementById('console'));

            fitAddon.fit();

            // window.addEventListener("resize", handleResize);

            // function handleResize() {
            //     fitAddon.fit();
            // };

            term.write('Welcome to \x1B[1;3;31mdsStack\x1B[0m $ ')

            dashCompDescription = new Quill('#dashCompDescription', {
                theme: 'snow',
                modules: {
                    "toolbar": true
                }
            });

            dashCompDescriptionBackup = new Quill('#dashCompDescription-backup', {
                theme: 'snow',
                modules: {
                    "toolbar": true
                }
            });
            dashCompDescriptionBackup.enable(false);
            $(".ql-toolbar").hide()

            var selectedNode

            //create main tree
            $("#jstree_div").jstree({
                "core": {
                    "themes": {
                        "name": "default",
                        "dots": true,
                        "icons": true
                    },
                    "data": {
                        'url': function (node) {
                            var searchText = $("#searchInput").val();
                            return node.id === '#' ?
                                'getTree?userID=' + userID + '&searchSt=' + searchText :
                                'getTree?userID=' + userID
                        },
                        'data': function (node) { return { 'id': node.id }; }
                    },
                    'check_callback': function (operation, node, node_parent, node_position, more) {
                        if (operation === "copy_node") {

                            const targetNodeId = node_parent.id;
                            const pos = node_position;
                            const targetNode = $('#jstree_div').jstree(true).get_node(targetNodeId);
                            $('#copyModal_newPosition').val(pos);

                            return showCopyModal(node, targetNodeId, targetNode);

                        }
                        return true;  //allow all other operations
                    }
                },
                "types": {
                    "code": {
                        "icon": "fa fa-code ",
                        // "a_attr": { class: " systemRow " }
                        //  "li_attr": { class: "  " }
                    },
                    "disabled": {
                        "icon": "fa fa-ban ",
                        // "a_attr": { class: " systemRow " }
                        //  "li_attr": { class: "  " }
                    },
                },
                "sort": function (a, b) {
                    a1 = this.get_node(a);
                    b1 = this.get_node(b);
                    return (a1.original.sort < b1.original.sort) ? -1 : 1;

                },
                "state": { "key": "myTree" },
                "dnd": {
                    check_while_dragging: false,
                    always_copy: true,
                    large_drop_target: true
                },
                "plugins": ["sort", "state", "types", "dnd", "wholerow"]
            }).on('create_node.jstree', function (e, data) {
                //console.log('saved');
            }).on('refresh.jstree', function (e, data) {
                $('#jstree_div').jstree('select_node', selectedNode);
                let nd = $('#jstree_div').jstree(true).get_node(selectedNode, true)
                if (nd.children) {
                    $('#jstree_div').jstree(true).get_node(selectedNode, true).children('.jstree-anchor').focus()
                }

            });

            //tree click
            $('#jstree_div').on("select_node.jstree", function (e, data) {
                selectedNode = data.selected[0]

                $.get('/getTree', { id: selectedNode, "userID": userID }, function (data) {
                    renderComp(data[0]);
                });
            });

            $("#newChildBtn").on("click", function () {
                newComp(selectedNode)
            })
            $("#newBtn").on("click", function () {
                newComp("#")
            })
            function newComp(parent) {

                let id = ""
                let text = "New Component"
                let script = ""

                let mydata = { "userID": userID, "userName": userName, "id": id, "parent": parent, "text": text, "script": script }

                $.ajax({
                    type: 'post',
                    contentType: "application/json",
                    url: '/saveComp',
                    data: JSON.stringify(mydata),
                    success: function (data) {
                        readComp()

                        let id = data
                        selectedNode = id

                        $('#jstree_div').jstree("deselect_all");
                        $('#jstree_div').jstree(true).refresh();
                    }
                }).done(function (e) {
                    //console.log('copy refresh' );



                }).fail(function (e) {
                    console.log('newComp post failed');
                    console.log(e);
                    $('#jstree_div').jstree(true).refresh();
                });
            }

            $("#saveBtn").hide();
            $("#cancelSaveBtn").hide();
            $("#pasteBtn").hide();
            $("#newCompVarBtn").hide();

            function disableTree() {
                // disable visible nodes
                $('#jstree_div li.jstree-node').each(function () {
                    $('#jstree_div').jstree("disable_node", this.id)
                })
                // block open new nodes
                $('#jstree_div i.jstree-ocl')
                    .off('click.block')
                    .on('click.block', function () {
                        return false;
                    });
                // eventually... dbl click
                $('#jstree_div').jstree().settings.core.dblclick_toggle = false;
                // eventually... block all edits
                $('#jstree_div').jstree().settings.core.check_callback = false;
            }
            function enableTree() {
                // enable again visible nodes
                $('#jstree_div li.jstree-node').each(function () {
                    $('#jstree_div').jstree("enable_node", this.id)
                });
                // ublock open new nodes
                $('#jstree_div i.jstree-ocl')
                    //
                    .off('click.block');
                // eventually... dbl click
                $('#jstree_div').jstree().settings.core.dblclick_toggle = true;
                // eventually... unblock all edits
                // set to true OR reset to whatever user defined function you are using
                $('#jstree_div').jstree().settings.core.check_callback = true;
            }

            var currentCompVarObj = {};

            function renderComp(data) {

                if (data) {
                    currentCompVarObj = data.variables ? data.variables : {}
                    let id = data.hasOwnProperty('id') ? data.id : ""
                    let parent = data.hasOwnProperty('text') ? data.parent : ""
                    let name = data.hasOwnProperty('text') ? data.text : ""
                    let script = data.hasOwnProperty('script') ? data.script : ""
                    let description = data.hasOwnProperty('description') ? data.description : ""
                    let enabled = !data.hasOwnProperty('enabled') ? "false" : data.enabled

                    scriptEditor.session.setValue(script)

                    if (enabled == "true") {
                        $("#enableBtn").show()
                        $("#disableBtn").hide()
                    } else {
                        $("#enableBtn").hide()
                        $("#disableBtn").show()
                    }

                    $("#comp-id").text(id)
                    selectedNode = id
                    $("#comp-enabled").text(enabled)
                    $("#comp-parent").text(parent)
                    $("#comp-name").text(name)

                    $("#comp-name-edit").val(name)

                    dashCompDescription.enable(false);
                    if (description.hasOwnProperty("ops")) {
                        dashCompDescription.setContents(description.ops)
                    } else {
                        dashCompDescription.setContents(
                            [{ insert: description },
                            { insert: '\n' }]
                        );
                    };

                    $("#copyBtn").popover('dispose').popover({
                        animation: true,
                        content: "Copy: " + $("#comp-name").text(),
                        delay: { "show": 500, "hide": 100 },
                        trigger: 'hover',
                        placement: 'top',
                        template: '<div class="popover hoverPop" role="tooltip"><div class="arrow hoverPopArrow"></div><h3 class="popover-header"></h3><div class="popover-body"></div></div>'
                    });


                    //load var table
                    var pCompHtml = "";
                    var x = 0;
                    //get variables obj and add an index number to each member
                    for (var varName in currentCompVarObj) {
                        currentCompVarObj[varName].idn = x.toString();
                        x++
                    }
                    $("#compVariables").html('');

                    loadVarTable(data.variables, false);

                    $("#backups").html("")
                    if (data.backups) {
                        loadBackups(data.backups, userID, id)
                    }


                    $("#compVariables").val(data.variables);


                    $("#urls").html("")
                    if (data.results) {
                        for (idx in data.results) {
                            let props = Object.getOwnPropertyNames(data.results[idx])
                            if (props.length > 0 && props[0] == "url") {
                                let h = "<div class='url'><a href='" + data.results[idx].url + "' target='_new'>" + data.results[idx].url + "</a></div>"
                                $("#urls").append(h)
                            }

                        }

                    }


                } else {
                    console.log("Error: No render data for component")
                }


            }

            $("#saveBtn").on("click", function () {
                saveComp()
            });

            function loadBackups(backups, userid, id) {
                if (backups && backups.length > 0) {
                    $("#backups").append("<div class='backupTable'>")
                    $("#backups").append("<div class='backupLabel'>Backups</div>")
                    for (idx in backups) {
                        const ds = new Date(backups[idx].ds).toLocaleString()
                        const el = $("<div class='backupDs' idx='" + idx + "'>" + ds + "</div>")
                        $("#backups").append(el)
                        el.click(function (e) {
                            $('#backupModal').modal('show')

                            const idx = e.target.attributes["idx"].value
                            $.get('/getBackup', { id: id, "userID": userID, "idx": idx }, function (data) {
                                const backup = data.data
                                const ds = data.ds

                                $("#comp-name-backup").text(backup.text)

                                const description = backup.description
                                if (description.hasOwnProperty("ops")) {
                                    dashCompDescriptionBackup.setContents(description.ops)
                                } else {
                                    dashCompDescriptionBackup.setContents(
                                        [{ insert: description },
                                        { insert: '\n' }]
                                    );
                                };

                                currentCompVarObj = backup.variables

                                $("#compVariables-backup").html("")
                                for (var varName in currentCompVarObj) {
                                    //new row
                                    var idn = currentCompVarObj[varName].idn
                                    pCompHtml = "<tr id='varRow_" + idn + "'" + " class='d-flex varRow'>";

                                    //add name col
                                    pCompHtml += "<td class='col-3 varNameTd'>";
                                    pCompHtml += "<span id = 'varNameTd-backup" + idn + "'></span>";
                                    pCompHtml += "</td>";

                                    //add flag col
                                    pCompHtml += "<td class='col-2 center compVarButtonRow'>"
                                    pCompHtml += '<div class="compVarButton">' + (currentCompVarObj[varName].private ? "Yes" : "No") + '</div>';

                                    pCompHtml += '<div class="compVarButton">' + (currentCompVarObj[varName].ask ? "Yes" : "No") + '</div>';
                                    pCompHtml += "</td>"

                                    //add type col
                                    var typeTxt = currentCompVarObj[varName].type;
                                    pCompHtml += "<td class='col-2 center'>" + (typeTxt === "" ? "Text" : typeTxt) + "</td>";

                                    //add value col
                                    pCompHtml += "<td class='col-5 varValTd'>"
                                    pCompHtml += "<span tabindex='0' id = 'varValTd-backup" + idn + "'></span>"
                                    if (typeTxt === "Color") {

                                        pCompHtml += '<input id = "varValColor' + idn + '" type="color" class="colorPickerView" disabled="true" >'
                                    }

                                    pCompHtml += "</td>";

                                    pCompHtml += "</tr>";

                                    $("#compVariables-backup").append(pCompHtml);

                                    $("#varNameTd-backup" + idn).text(varName);
                                    var valText = currentCompVarObj[varName].value;
                                    if (currentCompVarObj[varName].private) {
                                        valText = currentCompVarObj[varName].value === "" ? "" : "************"
                                    }
                                    if (valText.split("\n")[0].length > 40 || valText.split("\n").length > 1) {
                                        valText = valText.substring(0, 37) + "...";
                                    }
                                    var valTextPop = currentCompVarObj[varName].value;

                                    if (!currentCompVarObj[varName].private) {
                                        const options = {
                                            animation: true,
                                            content: valTextPop,
                                            delay: { "show": 500, "hide": 50 },
                                            trigger: 'hover focus',
                                            template: '<div class="popover clickPop" role="tooltip"><div class="arrow clickPopArrow"></div><h3 class="popover-header"></h3><pre><div class="popover-body"></div></pre></div>'

                                        }
                                        $("#varValTd-backup" + idn).popover(options);
                                    }


                                    $("#varValTd-backup" + idn).text(valText);
                                    $("#varValColor-backup" + idn).val(valText);
                                }

                                scriptEditorBackup.session.setValue(backup.script)
                            });


                        })
                    }
                    $("#backups").append("</div>")
                }

            }

            function loadVarTable(variables, showTools) {

                for (var varName in variables) {
                    //new row
                    var idn = currentCompVarObj[varName].idn
                    pCompHtml = "<tr id='varRow_" + idn + "'" + " class='d-flex varRow'>";

                    //add name col
                    pCompHtml += "<td class='col-3 varNameTd'>";
                    pCompHtml += showTools ? "<i class='fa fa-pencil fa-fw compVarEditButton' data-idn='" + idn + "'></i>" : "";
                    pCompHtml += "<span id = 'varNameTd" + idn + "'></span>";
                    pCompHtml += showTools ? "<i class='fa fa-times fa-fw compVarDelButton' data-idn='" + idn + "'></i>" : "";
                    pCompHtml += "</td>";

                    //add flag col
                    pCompHtml += "<td class='col-2 center compVarButtonRow'>"
                    pCompHtml += '<div class="compVarButton">' + (variables[varName].private ? "Yes" : "No") + '</div>';
                    // pCompHtml += '<div class="compVarButton">' + (variables[varName].promoted ? "Yes" : "No") + '</div>';
                    pCompHtml += '<div class="compVarButton">' + (variables[varName].ask ? "Yes" : "No") + '</div>';
                    pCompHtml += "</td>"

                    //add type col
                    var typeTxt = variables[varName].type;
                    pCompHtml += "<td class='col-2 center'>" + (typeTxt === "" ? "Text" : typeTxt) + "</td>";

                    //add value col
                    pCompHtml += "<td class='col-5 varValTd'>"
                    pCompHtml += "<span tabindex='0' id = 'varValTd" + idn + "'></span>"
                    if (typeTxt === "Color") {

                        pCompHtml += '<input id = "varValColor' + idn + '" type="color" class="colorPickerView" disabled="true" >'
                    }

                    pCompHtml += "</td>";

                    pCompHtml += "</tr>";

                    $("#compVariables").append(pCompHtml);

                    $("#varNameTd" + idn).text(varName);
                    var valText = variables[varName].value;
                    if (variables[varName].private) {
                        valText = variables[varName].value === "" ? "" : "************"
                    }
                    if (valText.split("\n")[0].length > 40 || valText.split("\n").length > 1) {
                        valText = valText.substring(0, 37) + "...";
                    }
                    var valTextPop = variables[varName].value;

                    if (!variables[varName].private) {
                        const options = {
                            animation: true,
                            content: valTextPop,
                            delay: { "show": 500, "hide": 50 },
                            trigger: 'hover focus',
                            template: '<div class="popover clickPop" role="tooltip"><div class="arrow clickPopArrow"></div><h3 class="popover-header"></h3><pre><div class="popover-body"></div></pre></div>'

                        }
                        $("#varValTd" + idn).popover(options);
                    }


                    $("#varValTd" + idn).text(valText);
                    $("#varValColor" + idn).val(valText);
                }

                if (showTools) {
                    setVarEditBtnEvent()
                }
            }

            function setVarEditBtnEvent() {

                $(".compVarEditButton").on('click', function () {
                    var idn = $(this).attr('data-idn');
                    var newHtml = createVarEditHtml(idn);

                    $("#varRow_" + idn).html(newHtml);
                    insertVarEditEvents();
                    var varName = "";
                    for (var x in currentCompVarObj) {
                        if (currentCompVarObj[x].idn == idn) (
                            varName = x
                        )
                    }

                    $("#newCompVarName" + idn).val(varName);

                    $("#newCompVarPrivateInput" + idn)[0].checked = currentCompVarObj[varName].private;
                    // $("#newCompVarPromotedInput" + idn)[0].checked = currentCompVarObj[varName].promoted;
                    $("#newCompVarAskInput" + idn)[0].checked = currentCompVarObj[varName].ask;

                    var thisType = currentCompVarObj[varName].type === "" ? "Text" : currentCompVarObj[varName].type;

                    $("#newCompVarTypeButton" + idn).val(thisType);
                    $("#newCompVarTypeButton" + idn).text(thisType);
                    $("#newCompVarValue" + idn).val(currentCompVarObj[varName].value);
                    $("#newCompVarPrivateDisp" + idn).html(currentCompVarObj[varName].private ? 'Yes' : 'No');

                    if (thisType === "Color") {
                        $("#compVarEditValButton" + idn).hide();
                        $("#compVarEditColorButton" + idn).show();
                        $('#colorPicker' + idn).val($("#newCompVarValue" + idn).val());
                    } else {
                        $("#compVarEditValButton" + idn).show();
                        $("#compVarEditColorButton" + idn).hide();
                    }

                    currentCompVarObj[varName].changed = idn;
                });

                $(".compVarDelButton").on('click', function () {
                    var idn = $(this).attr('data-idn');
                    for (varName in currentCompVarObj) {
                        if (currentCompVarObj[varName].idn == idn) {
                            delete currentCompVarObj[varName]; break
                        }
                    }
                    $("#varRow_" + idn).remove();
                });
            }

            function saveComp() {
                let id = $("#comp-id").text()
                let text = $("#comp-name-edit").val()
                let script = scriptEditor.getValue()
                let description = dashCompDescription.getContents()


                //find changed/new variables and add them to currentCompVarObj;
                for (var idn in currentCompVarObj) {

                    if (currentCompVarObj[idn].changed) {
                        var currentRowCntStr = currentCompVarObj[idn].changed;
                        delete currentCompVarObj[idn].changed;

                        if ($("#newCompVarName" + currentRowCntStr).val().trim() !== "") {
                            delete currentCompVarObj[idn];
                            var newVarsObj = {};
                            newVarsObj["private"] = $("#newCompVarPrivateInput" + currentRowCntStr)[0].checked ? true : false;
                            // newVarsObj["promoted"] = $("#newCompVarPromotedInput" + currentRowCntStr)[0].checked ? true : false;
                            newVarsObj["ask"] = $("#newCompVarAskInput" + currentRowCntStr)[0].checked ? true : false;
                            newVarsObj["type"] = $("#newCompVarTypeButton" + currentRowCntStr).text();
                            newVarsObj["value"] = $("#newCompVarValue" + currentRowCntStr).val();

                            currentCompVarObj[$("#newCompVarName" + currentRowCntStr).val()] = newVarsObj;
                        } else {
                            delete currentCompVarObj[idn];
                        }
                    }
                }



                let mydata = { "userID": userID, "userName": userName, "id": id, "text": text, "description": description, "script": script }

                mydata.compVariables = currentCompVarObj;

                $.ajax({
                    type: 'post',
                    contentType: "application/json",
                    url: '/saveComp',
                    data: JSON.stringify(mydata)
                }).done(function (e) {
                    //console.log('copy refresh' );
                    $("#comp-name").text($("#comp-name-edit").val())

                    readComp()

                }).fail(function (e) {
                    console.log('saveComp post failed');
                    console.log(e);
                    $('#jstree_div').jstree(true).refresh();
                });

            }

            //Place component inputs and buttons into read mode
            function readComp() {

                enableTree()
                $("#comp-name").fadeIn(0.3)
                $("#comp-name-edit").fadeOut(0.3)

                scriptEditor.renderer.$cursorLayer.element.style.display = "";
                scriptEditor.setReadOnly(true);

                dashCompDescription.enable(false);
                $(".ql-toolbar").hide()

                $("#editBtn").show();
                $("#newChildBtn").show();
                $("#saveBtn").hide();
                $("#cancelSaveBtn").hide();
                $("#deleteBtn").show();
                $("#copyBtn").show();
                if (currentCopyObj.id) {
                    $("#pasteBtn").show();
                }
                $("#runBtn").show();
                $('#jstree_div').jstree(true).refresh(true);
                $("#newCompVarBtn").hide();

            }

            $("#editBtn").on("click", function () {
                editComp()
            });

            $("#enableBtn").on("click", function (e) {
                $.get('/SetAttrib', { id: selectedNode, "userID": userID, "attrib": "enabled", "value": "false" }, function (data) {
                    $("#enableBtn").hide()
                    $("#disableBtn").show()
                    $('#jstree_div').jstree("refresh");
                })
            })

            $("#disableBtn").on("click", function (e) {
                $.get('/SetAttrib', { id: selectedNode, "userID": userID, "attrib": "enabled", "value": "true" }, function (data) {
                    $("#enableBtn").show()
                    $("#disableBtn").hide()
                    $('#jstree_div').jstree("refresh");
                })
            })

            $("#cancelSaveBtn").on("click", function () {
                $('#jstree_div').jstree(true).refresh(true)
                readComp()
            });

            function editComp() {
                $("#editBtn").hide();
                $("#newChildBtn").hide();
                $("#saveBtn").show();
                $("#cancelSaveBtn").show();
                $("#deleteBtn").hide();
                $("#copyBtn").hide();
                $("#pasteBtn").hide();
                $("#runBtn").hide();
                $("#newCompVarBtn").show();

                scriptEditor.renderer.$cursorLayer.element.style.display = "";
                scriptEditor.setReadOnly(false);

                dashCompDescription.enable(true);
                $(".ql-toolbar").show(0.3)

                $("#comp-name-edit").val($("#comp-name").text())
                $("#comp-name").fadeOut(0.3)
                $("#comp-name-edit").fadeIn(0.3)

                //load table and hide edit tools
                $("#compVariables").html('');
                loadVarTable(currentCompVarObj, true);
                disableTree()
            }

            $("#deleteBtn").on("click", function () {
                deleteComp()
            });

            function deleteComp() {

                $('#delModal').modal('show');
            }

            var copiedText = ""
            $("#copyBtn").on("click", function () {
                copiedText = $("#comp-name").text()

                currentCopyObj = { "id": selectedNode, "lib": "working", "name": $("#comp-name").text() };
                $("#pasteBtn").show();
                $("#pasteBtn").popover('dispose').popover({
                    animation: true,
                    content: "Paste: " + copiedText,
                    delay: { "show": 500, "hide": 100 },
                    trigger: 'hover',
                    placement: 'top',
                    template: '<div class="popover hoverPop" role="tooltip"><div class="arrow hoverPopArrow"></div><h3 class="popover-header"></h3><div class="popover-body"></div></div>'
                });
                $(this).popover('dispose').popover({
                    animation: true,
                    content: "Copied: " + copiedText,
                    delay: { "show": 500, "hide": 100 },
                    trigger: 'hover',
                    placement: 'top',
                    template: '<div class="popover hoverPop" role="tooltip"><div class="arrow hoverPopArrow"></div><h3 class="popover-header"></h3><div class="popover-body"></div></div>'
                });
                $(this).popover("show");

            });

            var currentCopyObj = {};
            $("#pasteBtn").on("click", function () {
                const targetNodeId = selectedNode;
                const pos = 1;
                const targetNode = $('#jstree_div').jstree(true).get_node(targetNodeId);
                const fromNode = $('#jstree_div').jstree(true).get_node(currentCopyObj.id);
                $('#copyModal_newPosition').val(pos);

                showCopyModal(fromNode, targetNodeId, targetNode);
            });

            function showCopyModal(node, targetNodeId, targetNode) {

                if (targetNode.id === "#") {
                    return false;
                } else {
                    $('#copyModal_listOfIds').val(node.original.id);

                    var fromTree;
                    if (node.parents[node.parents.length - 2] === 'lib') {
                        fromTree = $('#jslibtree_div');
                        $('#copyModal_lib').val(pickedLib)
                    } else {
                        fromTree = $('#jstree_div');
                        $('#copyModal_lib').val('local')
                    }
                    const treeNode = fromTree.jstree(true).get_node(node.original.id);

                    var childs = treeNode.children_d;
                    var listOfIds = [node.original.id];
                    $("#copyInfoText").html("<b>" + node.original.text + "</b><span> will be copied to </span><b>" + targetNode.text + "</b>");

                    if (childs.length > 0) {
                        listOfIds += ';' + childs.join(';');
                        $('#copyModal_listOfIds').val(listOfIds);
                        $('#copyChildrenRadio').show()
                    } else {
                        $('#copyChildrenRadio').hide()
                    }

                    if (targetNode.id === "local") {
                        $('#copyModal_newParent').val('#')
                    } else {
                        $('#copyModal_newParent').val(targetNode.id);  //targetId
                    }

                    $('#copyModal').modal('show');
                    $('#copyChildrenCb').prop('checked', false);

                    if ($('#moveCb').is(':checked')) {
                        $("#moveModalTitle").text("Move")
                        $("#copyConfirmButton").text("Move")
                        $("#copyInfoText span").text(" will be moved to ")
                        $("#copyChildrenRadioHolder").hide()

                    } else {
                        $("#moveModalTitle").text("Copy")
                        $("#copyConfirmButton").text("Copy")
                        $("#copyInfoText span").text(" will be copied to ")
                        $("#copyChildrenRadioHolder").show()
                    }

                    return false;
                }
            }

            $('#moveCb').on('click', function (evt) {
                if ($('#moveCb').is(':checked')) {
                    $("#moveModalTitle").text("Move")
                    $("#copyConfirmButton").text("Move")
                    $("#copyInfoText span").text(" will be moved to ")
                    $("#copyChildrenRadioHolder").hide()

                } else {
                    $("#moveModalTitle").text("Copy")
                    $("#copyConfirmButton").text("Copy")
                    $("#copyInfoText span").text(" will be copied to ")
                    $("#copyChildrenRadioHolder").show()
                }
            });

            $("#copyConfirmButton").on("click", function () {
                var mydata = {};
                mydata.ids = $('#copyModal_listOfIds').val();
                mydata.parent = $('#copyModal_newParent').val();
                mydata.pos = $('#copyModal_newPosition').val();
                mydata.userID = userID
                mydata.userName = userName
                mydata.move = $('#moveCb').is(':checked') ? "true" : "false"
                // mydata.lib = $('#copyModal_lib').val();

                if (!$('#copyChildrenCb').is(':checked')) {
                    if (mydata.ids.split(';').length > 1) {
                        mydata.ids = mydata.ids.split(';')[0]
                    }
                }

                $.ajax({
                    type: 'post',
                    contentType: "application/json",
                    url: '/copy',
                    data: JSON.stringify(mydata)
                }).done(function (e) {
                    //console.log('copy refresh' );
                    $('#jstree_div').jstree(true).refresh(true);
                }).fail(function (e) {
                    console.log('copy failed');
                    console.log(e);
                    $('#jstree_div').jstree(true).refresh();
                });
                $('#copyModal').modal('toggle');
            });

            $("#moveUpBtn").click(function (event) {
                //console.log("up");
                $.get('/Move', { id: selectedNode, userID: userID, userName: userName, direction: 'up' }, function (data) {
                    var newPos = data.newPos;
                    var oldPos = data.oldPos;
                    var otherId = data.otherId;
                    if (otherId !== '') {
                        var nodeInst = $('#jstree_div').jstree(true).get_node(selectedNode);
                        var otherInst = $('#jstree_div').jstree(true).get_node(otherId);
                        nodeInst.original.sort = newPos;
                        otherInst.original.sort = oldPos;
                        var parent = $("#comp-parent").text();
                        $('#jstree_div').jstree("move_node", nodeInst, parent, newPos);
                        $('#jstree_div').jstree("move_node", otherInst, parent, oldPos);
                    }
                })
            })

            $("#moveDnBtn").click(function (event) {
                //console.log("down");
                $.get('/Move', { id: selectedNode, userID: userID, userName: userName, direction: 'down' }, function (data) {
                    var newPos = data.newPos;
                    var oldPos = data.oldPos;
                    var otherId = data.otherId;
                    if (otherId !== '') {
                        var nodeInst = $('#jstree_div').jstree(true).get_node(selectedNode);
                        var otherInst = $('#jstree_div').jstree(true).get_node(otherId);
                        nodeInst.original.sort = newPos;
                        otherInst.original.sort = oldPos;
                        var parent = $("#comp-parent").text();
                        $('#jstree_div').jstree("move_node", nodeInst, parent, newPos);
                        $('#jstree_div').jstree("move_node", otherInst, parent, oldPos);
                    }
                })
            })

            $(function () {
                $("#newBtn").popover('dispose').popover({
                    animation: true,
                    content: "New Component",
                    delay: { "show": 500, "hide": 100 },
                    trigger: 'hover',
                    placement: 'top',
                    template: '<div class="popover hoverPop" role="tooltip"><div class="arrow hoverPopArrow"></div><h3 class="popover-header"></h3><div class="popover-body"></div></div>'
                });
                $("#moveUpBtn").popover('dispose').popover({
                    animation: true,
                    content: "Move Up",
                    delay: { "show": 500, "hide": 100 },
                    trigger: 'hover',
                    placement: 'top',
                    template: '<div class="popover hoverPop" role="tooltip"><div class="arrow hoverPopArrow"></div><h3 class="popover-header"></h3><div class="popover-body"></div></div>'
                });
                $("#moveDnBtn").popover('dispose').popover({
                    animation: true,
                    content: "Move Down",
                    delay: { "show": 500, "hide": 100 },
                    trigger: 'hover',
                    placement: 'top',
                    template: '<div class="popover hoverPop" role="tooltip"><div class="arrow hoverPopArrow"></div><h3 class="popover-header"></h3><div class="popover-body"></div></div>'
                });
                $("#runBtn").popover('dispose').popover({
                    animation: true,
                    content: "Run Script",
                    delay: { "show": 500, "hide": 100 },
                    trigger: 'hover',
                    placement: 'top',
                    template: '<div class="popover hoverPop" role="tooltip"><div class="arrow hoverPopArrow"></div><h3 class="popover-header"></h3><div class="popover-body"></div></div>'
                });
                $("#newChildBtn").popover('dispose').popover({
                    animation: true,
                    content: "New Child Component",
                    delay: { "show": 500, "hide": 100 },
                    trigger: 'hover',
                    placement: 'top',
                    template: '<div class="popover hoverPop" role="tooltip"><div class="arrow hoverPopArrow"></div><h3 class="popover-header"></h3><div class="popover-body"></div></div>'
                });
                $("#editBtn").popover('dispose').popover({
                    animation: true,
                    content: "Edit Component",
                    delay: { "show": 500, "hide": 100 },
                    trigger: 'hover',
                    placement: 'top',
                    template: '<div class="popover hoverPop" role="tooltip"><div class="arrow hoverPopArrow"></div><h3 class="popover-header"></h3><div class="popover-body"></div></div>'
                });
                $("#saveBtn").popover('dispose').popover({
                    animation: true,
                    content: "Save Component",
                    delay: { "show": 500, "hide": 100 },
                    trigger: 'hover',
                    placement: 'top',
                    template: '<div class="popover hoverPop" role="tooltip"><div class="arrow hoverPopArrow"></div><h3 class="popover-header"></h3><div class="popover-body"></div></div>'
                });
                $("#cancelSaveBtn").popover('dispose').popover({
                    animation: true,
                    content: "Cancel Edit",
                    delay: { "show": 500, "hide": 100 },
                    trigger: 'hover',
                    placement: 'top',
                    template: '<div class="popover hoverPop" role="tooltip"><div class="arrow hoverPopArrow"></div><h3 class="popover-header"></h3><div class="popover-body"></div></div>'
                });
                $("#deleteBtn").popover('dispose').popover({
                    animation: true,
                    content: "Delete Component",
                    delay: { "show": 500, "hide": 100 },
                    trigger: 'hover',
                    placement: 'top',
                    template: '<div class="popover hoverPop" role="tooltip"><div class="arrow hoverPopArrow"></div><h3 class="popover-header"></h3><div class="popover-body"></div></div>'
                });
                $("#enableBtn").popover('dispose').popover({
                    animation: true,
                    content: "Disable Component",
                    delay: { "show": 500, "hide": 100 },
                    trigger: 'hover',
                    placement: 'top',
                    template: '<div class="popover hoverPop" role="tooltip"><div class="arrow hoverPopArrow"></div><h3 class="popover-header"></h3><div class="popover-body"></div></div>'
                });
                $("#disableBtn").popover('dispose').popover({
                    animation: true,
                    content: "Enable Component",
                    delay: { "show": 500, "hide": 100 },
                    trigger: 'hover',
                    placement: 'top',
                    template: '<div class="popover hoverPop" role="tooltip"><div class="arrow hoverPopArrow"></div><h3 class="popover-header"></h3><div class="popover-body"></div></div>'
                });
            }) //setup popups

            //Set flag if mouse is down while hovering column resize handles
            $(function () {
                var widthHandle = $('#tCol-handle');
                widthHandle.on('mousedown', function (e) {
                    isResizingWidth = true;
                });
            })

            var isResizingWidth = false
            $(document).on('mousemove', function (e) {
                const container = $('#tCol');
                if (!isResizingWidth)
                    return;

                if (isResizingWidth) {
                    e.preventDefault();

                    var leftWidth = e.pageX - 8

                    container.css("flex", "0 0 " + leftWidth + "px")

                    localStorage['locTreeWidth'] = JSON.stringify({ width: leftWidth });

                    fitAddon.fit();

                }

            }).on('mouseup', function (e) {
                isResizingWidth = false;
            });

            function hideThings(fields) {
                fields.split(';').forEach(function (field) {
                    var fieldObj = $("#" + field);
                    if (fieldObj) {
                        fieldObj.hide();
                    }
                })
            }

            //remove component
            $("#delConfirmButton").on("click", function () {

                var mydata = {};
                mydata.ids = selectedNode
                mydata.userID = userID
                mydata.userName = userName

                var tree = $('#jstree_div');

                var treeNode = tree.jstree(true).get_node(selectedNode)
                var childs = treeNode.children_d
                var parent = treeNode.parent
                var listOfIds = selectedNode
                if (childs.length > 0) {
                    listOfIds += ';' + childs.join(';');
                }
                mydata.ids = listOfIds

                $.ajax({
                    type: 'post',
                    contentType: "application/json",
                    url: '/remove',
                    data: JSON.stringify(mydata),
                    selectedNode: selectedNode,
                    parent: parent
                }).done(function (data) {
                    //console.log(data);

                    tree.jstree(true).delete_node(this.selectedNode)
                    tree.jstree(true).select_node(this.parent, false)
                    tree.jstree(true).redraw(true)

                }).fail(function (e) {
                    console.log('remove refresh fail');
                    console.log(e);
                    $('#jstree_div').jstree(true).refresh()
                });

                $('#delModal').modal('toggle');
            });

            //theme
            termLightTheme = {
                "foreground": "#53676d",
                "background": "#ebebeb",
                "cursorColor": "#3a4d53",
                "selectionBackground": "#cfcebe",
                "black": "#e9e4d0",
                "red": "#d2212d",
                "green": "#489100",
                "yellow": "#ad8900",
                "blue": "#0072d4",
                "purple": "#ca4898",
                "cyan": "#009c8f",
                "white": "#909995",
                "brightBlack": "#cfcebe",
                "brightRed": "#cc1729",
                "brightGreen": "#428b00",
                "brightYellow": "#a78300",
                "brightBlue": "#006dce",
                "brightPurple": "#c44392",
                "brightCyan": "#00978a",
                "brightWhite": "#3a4d53",
                "cursor": "#3a4d53"
            }

            termDarkTheme = {
                "foreground": "#bbb",
                "background": "#000",
                "cursorColor": "#fff",
                "selectionBackground": "#cfcebe",
                "black": "#e9e4d0",
                "red": "#d2212d",
                "green": "#489100",
                "yellow": "#ad8900",
                "blue": "#0072d4",
                "purple": "#ca4898",
                "cyan": "#009c8f",
                "white": "#909995",
                "brightBlack": "#cfcebe",
                "brightRed": "#cc1729",
                "brightGreen": "#428b00",
                "brightYellow": "#a78300",
                "brightBlue": "#006dce",
                "brightPurple": "#c44392",
                "brightCyan": "#00978a",
                "brightWhite": "#3a4d53",
                "cursor": "#3a4d53"
            }

            term.options = {
                fontSize: 13,
                fontWeight: 200,
                fontFamily: 'Menlo, Consolas, "Liberation Mono", Courier, monospace',
                cursorBlink: false,
                enableBold: false
            }
            term.options.theme = termLightTheme

            currentStyleName = localStorage['theme'] ? localStorage['theme'] : 'default'

            // $('#consoleScrollx').on('mouseenter', function () {
            //     $("#consoleScrollx").css({
            //         "min-height": '400px',
            //         "height": '400px'
            //     })
            //     term.focus()
            //     timeoutId = setTimeout(

            //         function () {
            //             fitAddon.fit()
            //         }, 1100)
            // })
            // $('#consoleScrollx').on('mouseleave', function () {
            //     $("#consoleScrollx").css({
            //         "min-height": '70px',
            //         "height": '70px'
            //     })
            //     timeoutId = setTimeout(

            //         function () {
            //             fitAddon.fit()
            //         }, 600)
            // })
            $('#consoleExpand').on('click', function () {
                $('#consoleExpand').hide()
                $('#consoleClose').show()
                $("#consoleScrollx").css({
                    "min-height": '400px',
                    "height": '400px'
                })
                term.focus()
                timeoutId = setTimeout(
                    function () {
                        fitAddon.fit()
                    }, 300)
            })
            $('#consoleClose').on('click', function () {
                $('#consoleExpand').show()
                $('#consoleClose').hide()
                $("#consoleScrollx").css({
                    "min-height": '70px',
                    "height": '70px'
                })
                term.focus()
                timeoutId = setTimeout(
                    function () {
                        fitAddon.fit()
                    }, 300)
            })
            $('#consoleClose').hide()

            if (currentStyleName === "dark") {
                $("#darkStyleRadioTop").prop('checked', true)
                setStyle(currentStyleName)
            } else {
                $("#defaultStyleRadioTop").prop('checked', true)
                setStyle(currentStyleName)
            }

            $('.stylePickTop').on('click', function (evt) {
                //evt.preventDefault();
                var pickedStyle = $(this).attr('data-ID')
                setStyle(pickedStyle);
                localStorage['theme'] = pickedStyle
            });

            //Apply Style
            function setStyle(name) {
                const styleName = name;

                currentStyleName = styleName;
                setEditorsStyle(styleName);

                var mydata = { styleName: styleName };

                $.ajax({
                    type: 'get',
                    data: mydata,
                    dataType: "text",
                    headers: {
                        "content-type": "application/json"
                    },
                    url: '/getStyle',
                    success: function (data) {
                        var sheet;
                        if (lastStyleSheet) {
                            sheet = lastStyleSheet;
                        } else {
                            sheet = document.createElement('style');
                            document.body.appendChild(sheet);
                        }
                        lastStyleSheet = sheet;

                        const respJson = JSON.parse(data);
                        cssUnsortTxt = respJson.css;
                        var cssArr = cssUnsortTxt.split("}")
                        shuffleArray(cssArr);
                        cssTxt = cssArr.join("}");

                        loadCssParts(0, lastStyleSheet);
                    },
                    error: function (error) {
                        console.log(error)
                    }
                })

            }

            function shuffleArray(array) {
                for (let i = array.length - 1; i > 0; i--) {
                    const j = Math.floor(Math.random() * (i + 1));
                    [array[i], array[j]] = [array[j], array[i]];
                }
            }

            function setEditorsStyle(styleName) {
                if (styleName === "dark") {
                    scriptEditor.setTheme("ace/theme/twilight");
                    scriptEditorBackup.setTheme("ace/theme/twilight");
                    term.options.theme = termDarkTheme
                } else {
                    scriptEditor.setTheme("ace/theme/clouds");
                    scriptEditorBackup.setTheme("ace/theme/clouds");
                    term.options.theme = termLightTheme
                }
            }

            //run
            $("#runBtn").click(function (event) {

                if ($("#comp-enabled").text() == "false") {
                    $('#runChildrenGroup').hide()
                    $("#cantBuildMsg").text("This component is disabled and can not be run");
                    $("#cantBuildModalTitleName").text($("#comp-name").text());
                    $('#cantRunModal').modal('show');
                } else {
                    var tree = $('#jstree_div');
                    var treeNode = tree.jstree(true).get_node(selectedNode)
                    var childs = treeNode.children_d
                    var listOfIds = selectedNode
                    if (childs.length > 0) {
                        listOfIds += ';' + childs.join(';');
                    }
                    $("#idToBeRun").val(listOfIds)

                    if (childs.length > 0) {
                        $('#runChildrenGroup').show()
                    } else {
                        $('#runChildrenGroup').hide()
                    }
                    $("#buildModalTitleName").text($("#comp-name").text());
                    $('#runModal').modal('show');
                }

            });

            $("#connectBtn").click(function (event) {
                term.focus()
                term.write("connecting....\r\n")
                runJob([], false)
            });
            $("#connectBtn").popover('dispose').popover({
                animation: true,
                content: "Connect to host",
                delay: { "show": 500, "hide": 100 },
                trigger: 'hover',
                placement: 'top',
                template: '<div class="popover hoverPop" role="tooltip"><div class="arrow hoverPopArrow"></div><h3 class="popover-header"></h3><div class="popover-body"></div></div>'
            });

            // $("#wrapBtn").click(function (event) {
            //     term.focus()
            //     if (!$("div#console").hasClass("consoleWrap")) {
            //         $("div#console").addClass("consoleWrap")
            //         $("#wrapBtn").addClass("consoleWrapBtn")
            //         fitAddon.fit();
            //     } else {
            //         $("div#console").removeClass("consoleWrap")
            //         $("#wrapBtn").removeClass("consoleWrapBtn")
            //         fitAddon.fit();
            //     }
            // });

            $("#wrapBtn").popover('dispose').popover({
                animation: true,
                content: "Wrap text",
                delay: { "show": 500, "hide": 100 },
                trigger: 'hover',
                placement: 'top',
                template: '<div class="popover hoverPop" role="tooltip"><div class="arrow hoverPopArrow"></div><h3 class="popover-header"></h3><div class="popover-body"></div></div>'
            });

            $("#runConfirmButton").click(function (event) {

                let ids = $("#idToBeRun").val().split(";")
                let rc = true
                if ($('#runChildrenCb').is(':checked') && ids.length > 1) {
                    rc = true
                } else {
                    rc = false
                    ids = [ids[0]]
                }

                runJob(ids, rc);
                $('#runModal').modal('toggle');
                term.focus()
            });

            var accessToken = ""
            function runJob(ids, runChildren) {

                var settings
                if (localStorage['settings']) {
                    settings = JSON.parse(localStorage['settings'])
                } else {
                    console.log("ERROR: Local storage 'Settings' not found")
                    return (1)
                }
                var runData = {}

                runData["runChildren"] = runChildren
                runData["ids"] = ids
                settingsHostName = settings.settingsHostName1 ? settings.settingsHostName1 : ""
                settingsLoginName = settings.settingsLoginName1 ? settings.settingsLoginName1 : ""
                settingsYourName = settings.settingsYourName ? settings.settingsYourName : ""

                settingsKey = settings.settingsKey1 ? settings.settingsKey1 : ""
                runData["settingsYourName"] = settingsYourName
                runData["settingsHostName"] = settingsHostName
                runData["settingsLoginName"] = settingsLoginName
                runData["settingsKey"] = settingsKey
                runData["token"] = accessToken
                runData["userID"] = userID

                ws.send(JSON.stringify(runData))
            }

            $("#search-icon").on("click", function () {
                $('#jstree_div').jstree(true).refresh(true);
            });
            $("#searchInput").on('keyup', function (e) {
                if (e.keyCode == 13) {
                    $('#jstree_div').jstree(true).refresh(true);
                }
            });

            function setEndOfContenteditable(elem) {
                // put cursor at end of console
                let sel = window.getSelection()
                sel.selectAllChildren(elem)
                sel.collapseToEnd()
            }

            term.attachCustomKeyEventHandler((key) => {
                if (key.code === 'KeyV') {
                    if (key.metaKey) {
                        $("#console").focus()

                        navigator.clipboard
                            .readText()
                            .then(
                                (clipText) => (
                                    ws.send(JSON.stringify({ "token": accessToken, "key": clipText }))

                                ),
                            );
                    }
                }
                return true;
            });

            term.onKey((key, ev) => {

                if (ws) {

                    ws.send(JSON.stringify({ "token": accessToken, "key": key.key }));
                }
                // console.log("keypress " + key)

            });

            const lhost = location.host
            var ws = new WebSocket('wss://' + lhost);

            var pingTimeoutId
            ws.addEventListener('open', function (e) {
                ws.addEventListener('message', function (e) {
                    console.log('received:', e.data);
                    if (e.data === "pong") {

                    } else {
                        const data = JSON.parse(e.data)
                        accessToken = data.token ? data.token : accessToken

                        if (data.message) {
                            term.write(data.message)
                        }
                        if (data.status) {
                            if (data.status === "up") {
                                $("#connectBtn").addClass("up").removeClass("down")
                            } else {
                                $("#connectBtn").addClass("down").removeClass("up")
                            }
                        }
                        if (data.varName) {
                            const varName = data.varName
                            if (varName == "url") {
                                const varVal = data.varVal
                                let h = "<div class='url'><a href='" + varVal + "' target='_new'>" + varVal + "</a></div>"
                                $("#urls").append(h)
                            }
                            if (varName == "alert") {
                                const varVal = data.varVal


                                $('#alertModal').modal('show');
                                const cnt = $('#msgText').children().length
                                const rowh = $("<div id='alertRow_" + cnt + "' class='alertRow'><span class='alertTxt'></span><i class='fa fa-copy fa-fw alertRowCopyIcon'></i></div>")
                                $('#msgText').append(rowh)
                                rowh.find(".alertTxt").text(varVal)
                                rowh.on("click", function (rowh) {
                                    const t = $(this)
                                    navigator.clipboard.writeText(t.text())
                                    currentColor = t.css("color")
                                    t.css({ "transition": "color 0s", "color": "blue", "font-weight": "800" })

                                    timeoutId = setTimeout(
                                        function (t, currentColor) {
                                            t.css({ "transition": "color 1s", "color": currentColor })
                                        }, 100, t, currentColor)
                                })

                                // alert(varVal)

                            }

                            if (varName == "preformatted") {
                                const varVal = data.varVal

                                $('#preformattedModal').modal('show');
                                $('#pfText').text(varVal)
                            }
                        }

                    }
                })
            })

            ws.onclose = function (e) {
                clearTimeout(pingTimeoutId)
                console.log("ws closed")
                $("#connectBtn").addClass("down").removeClass("up")
            };

            function pingpong() {
                pingTimeoutId = setTimeout(
                    function () {
                        ws.send("ping")
                        pingpong()
                    }, 1000 * 30)
            }
            pingpong()

            //function to create a block of var input html for new vars and edits. provide index str eg "0" or "1" ...
            function createVarEditHtml(currentRowCntStr) {
                var newHtml = '<tr id="new_row' + currentRowCntStr + '" class="d-flex varRow newVarRow">'

                //new var name input
                newHtml += '<td class="col-3"><input id="newCompVarName' + currentRowCntStr + '" class="form-control newCompVarName" type="text"></td>'

                //New privacy switch
                newHtml += '<td class="col-2 newCompVarButtonRow">'
                newHtml += '<label class="varFlag privacy-flag" ><input id="newCompVarPrivateInput' + currentRowCntStr + '" data-inx=' + currentRowCntStr + ' type="checkbox"  class=" "></label>';

                //New promoted switch
                // newHtml += '<label class="varFlag promoted-flag" ><input id="newCompVarPromotedInput' + currentRowCntStr + '" data-inx=' + currentRowCntStr + ' type="checkbox"  class=" "></label>';

                //New ask switch
                newHtml += '<label class="varFlag ask-flag" ><input id="newCompVarAskInput' + currentRowCntStr + '" data-inx=' + currentRowCntStr + ' type="checkbox"  class=" "></label>';
                newHtml += '</td>';

                //New var type pick
                newHtml += '<td class="col-2 center">'
                newHtml += '<button class="dropdown-toggle newCompVarTypeButton" type="button" id="newCompVarTypeButton' + currentRowCntStr + '" data-toggle="dropdown" aria-haspopup="true" aria-expanded="true">Text</button>';
                newHtml += '<div id="newCompVarTypeDropdownMenu" class="dropdown-menu dashSystemsDropdownMenu" aria-labelledby="newCompVarTypeButton' + currentRowCntStr + '" x-placement="bottom-start" >';

                newHtml += '<div><a class="dropdown-item newCompVarTypeDropdownItem" data-target="' + currentRowCntStr + '" data-type="Text" href="#">Text</a></div>';
                // newHtml += '<div><a class="dropdown-item newCompVarTypeDropdownItem" data-target="' + currentRowCntStr + '" data-type="WYSIWYG" href="#" >WYSIWYG</a></div>';
                newHtml += '<div><a class="dropdown-item newCompVarTypeDropdownItem" data-target="' + currentRowCntStr + '" data-type="Color" href="#" >Color</a></div>';
                newHtml += '</div></td>'

                //New component variable value
                newHtml += '<td class="col-5"><div class="compVarEditValRow">';
                newHtml += '<textarea rows="1" id="newCompVarValue' + currentRowCntStr + '" class="newCompVarValue" ></textarea>';

                newHtml += '<a href="#"><i id="compVarEditValButton' + currentRowCntStr + '" class="fa fa-expand fa-fw compVarEditValButton" data-idn="' + currentRowCntStr + '" ></i></a>';
                newHtml += '<div id="compVarEditColorButton' + currentRowCntStr + '"  data-idn="' + currentRowCntStr + ' " style="display:none;">' +
                    '<input type="color" class="colorPicker" style="" data-idn=' + currentRowCntStr + ' id="colorPicker' + currentRowCntStr + '">' +
                    '</div>';
                newHtml += '</td></tr>';

                return newHtml;
            }

            $('.newCompVarBtn').on('click', function () {

                var currentRowCntStr = Object.keys(currentCompVarObj).length.toString();

                var newHtml = createVarEditHtml(currentRowCntStr);

                var varName = "newVar_" + currentRowCntStr
                $("#compVariables").append(newHtml);


                currentCompVarObj[varName] = { private: false, type: "", value: "", changed: currentRowCntStr };
                $("#newCompVarPrivateDisp" + currentRowCntStr).html('No');
                insertVarEditEvents()

            })
            function insertVarEditEvents() {

                $(".newCompVarTypeDropdownItem").on('click', function () {
                    var type = $(this).attr('data-type');
                    var target = $(this).attr('data-target');

                    $("#newCompVarTypeButton" + target).html(type);
                    if (type === "Color") {
                        $("#compVarEditValButton" + target).hide();
                        $("#compVarEditColorButton" + target).show();
                    } else {
                        $("#compVarEditValButton" + target).show();
                        $("#compVarEditColorButton" + target).hide();
                    }
                });


                $(".compVarEditValButton").on('click', function () {
                    var idn = $(this).attr('data-idn');

                    var varName = "";
                    var varType = $("#newCompVarTypeButton" + idn).text();
                    for (var nm in currentCompVarObj) {
                        if (currentCompVarObj[nm].idn === idn) {
                            varName = nm;
                        }
                    }
                    $('#varEditModal').modal('show');
                    $('#varValEditor').val($("#newCompVarValue" + idn).val());
                    $("#varEditModalCurrentIdn").val(idn);

                });

                $('.colorPicker').on('change', function () {
                    var idn = $(this).attr('data-idn');
                    $("#newCompVarValue" + idn).val($('#colorPicker' + idn).val())

                })

                //Save value of text area back
                $('#varEditModal').on('hidden.bs.modal', function () {
                    var idn = $("#varEditModalCurrentIdn").val();
                    $("#newCompVarValue" + idn).val($('#varValEditor').val())

                });
            }

            $("#comp-id").on("click", function () {
                navigator.clipboard.writeText($("#comp-id").text())
                $("#comp-id").css({ "color": "blue" })
            })

            // $("#comp-id").on("hover", function () {
            //     $("#comp-id").css({"opcity":"100"})
            // })

            function downloadSettings() {

                let settingsArr = []

                settingsArr.push({ "yourName": $("#settingsYourName").val() })
                settingsArr.push({ "hostName1": $("#settingsHostName1").val() })
                settingsArr.push({ "loginName1": $("#settingsLoginName1").val() })
                settingsArr.push({ "key1": $("#settingsKey1").val() })
                settingsArr.push({ "userID": $("#userID").val() })

                var file = new File([JSON.stringify(settingsArr)], "ds_backup.txt", {
                    type: "text/plain",
                });

                const link = document.createElement('a')
                const url = URL.createObjectURL(file)

                link.href = url
                link.download = file.name
                document.body.appendChild(link)
                link.click()

                document.body.removeChild(link)
                window.URL.revokeObjectURL(url)
            }

            $("#settingsDownloadBtn").click(function (e) {
                downloadSettings()
            })

            $("#settingsUploadBtn").click(function (e) {
                $("#uploadFileLine").css({ "display": "block" })
            })

            const $file = document.getElementById('uploadFile')
            const fetchFile = async e => {
                const [file] = e.target.files
                if ([file]) {
                    const text = await file.text()
                    try {
                        const settings = JSON.parse(text)

                        for (ln in settings) {
                            if (settings[ln].yourName) { $("#settingsYourName").val(settings[ln].yourName) }
                            if (settings[ln].hostName1) { $("#settingsHostName1").val(settings[ln].hostName1) }
                            if (settings[ln].loginName1) { $("#settingsLoginName1").val(settings[ln].loginName1) }
                            if (settings[ln].key1) { $("#settingsKey1").val(settings[ln].key1) }
                            if (settings[ln].userID) { $("#userID").val(settings[ln].userID) }
                            $("#settingMsg").text("Settings have been restored. Click save to save changes.")
                        }
                    } catch (error) {
                        alert("Error: Cannot parse settings backup")
                    }
                }

            }

            $file.onchange = fetchFile


        });

        var cssTxt = "";
        var cssUnsortTxt = "";
        var currentStyleName = ""
        var lastStyleSheet

        function loadCssParts(part, sheet) {

            var cssTxtPart = cssTxt.split("}")[part]
            var totRows = cssTxt.split("}").length
            if (totRows > part) {
                sheet.innerHTML += cssTxtPart + "}"
                setTimeout('loadCssParts(' + (part + 1).toString() + ', lastStyleSheet)', 500 / totRows);
            } else {
                sheet.innerHTML = "";
                sheet.innerHTML = cssUnsortTxt
            }
        }



    </script>
</head>


<body class="index-page">
    <div id="navbarNav-outer">

        <nav id="navbarNav" class="navbar navbar-expand-md navbar-light pop-bar">
            <span><a class="navbar-brand" href="/"><b><span id="navTitle">dsStack</span></b></a></span>

            <div id="console-button-row">
                <i id="alertBtn" class="fa fa-comment fa-fw"></i>
                <i id="connectBtn" class="fa fa-power-off fa-fw"></i>
                <i id="settingsBtn" class="fa fa-gear fa-fw"></i>
            </div>
        </nav>
    </div>

    <div id="MainRaisedCol" class="wrapper scroller">

        <div class="main">
            <div id="Manager" class="manager">
                <div id="grid"></div>
            </div>
            <div id="rrow" class="rrow ">
                <div id="tCol" class=" tCol">
                    <div class="tCol-top-row">
                        <div class="button-row">
                            <i id="newBtn" class="fa fa-plus fa-fw"></i>
                            <i id="moveUpBtn" class="fa fa-chevron-up fa-fw"></i>
                            <i id="moveDnBtn" class="fa fa-chevron-down fa-fw"></i>
                        </div>
                        <div id="compSearch" class="form-group search-group">
                            <input class="form-control form-custom searchInput" placeholder="" id="searchInput">
                            <i id="search-icon" class="fa fa-search  fa-fw search-icon"></i>
                        </div>
                    </div>


                    <div id="jstree_div" class="jstree-default">
                    </div>
                    <div id="backups"></div>
                </div>

                <div id="tCol-handle" class="tCol-handle">
                </div>

                <div id="iCol" class="iCol">
                    <div class="button-row">
                        <i id="editBtn" class="fa fa-pencil fa-fw"></i>
                        <i id="newChildBtn" class="fa fa-plus fa-fw"></i>
                        <i id="deleteBtn" class="fa fa-minus fa-fw"></i>
                        <i id="saveBtn" class="fa fa-floppy-o fa-fw"></i>
                        <i id="cancelSaveBtn" class="fa fa-close fa-fw"></i>
                        <i id="copyBtn" class="fa fa-copy fa-fw"></i>
                        <i id="pasteBtn" class="fa fa-paste fa-fw"></i>
                        <i id="enableBtn" class="fa fa-check fa-fw"></i>
                        <i id="disableBtn" class="fa fa-ban fa-fw"></i>
                    </div>


                    <div id="comp-parent" style="display:none;"></div>
                    <div id="comp-name-container">
                        <div id="nameHolder">
                            <div id="comp-name"></div>
                            <div id="comp-id"></div>
                            <div id="comp-enabled" style="display:none;"></div>
                        </div>
                        <input type="text" id="comp-name-edit" style="display:none;">
                    </div>
                    <div class="iCol-scroll">
                        <div id="dashCompDescription"></div>

                        <div id="compVariablesForm" class="form-group">
                            <label class="build-label">Component
                                Properties</label><a id="newCompVarBtn" class="newCompVarBtn" href="#"><i
                                    class="fa fa-plus fa-fw"></i></a>


                            <!-- <a href="#" id='varHelp' data-toggle="modal"
                            data-target="#varHelpModal"><i
                            class="fa fa-question fa-fw"></i></a> -->


                            <!--<textarea rows="4" class="form-control form-custom" placeholder="List var=value pairs" id="compVariables"></textarea>-->
                            <table class="table varTable">
                                <thead>
                                    <tr class="d-flex">
                                        <th class="col-3 varLabel varLabelName">
                                            Name</th>
                                        <th class="col-2 varLabel varFlagLabels center">
                                            <div class="varFlagLabel varFlagLabel-pri">
                                                Pri</div>
                                            <!-- <div
                                class="varFlagLabel varFlagLabel-pro">
                                Pro</div> -->
                                            <div class="varFlagLabel varFlagLabel-ask">
                                                Ask</div>
                                        </th>

                                        <th class="col-2 varLabel center">Type
                                        </th>
                                        <th class="col-5 varLabel">Value</th>
                                    </tr>
                                </thead>
                                <tbody id="compVariables" class="varTbody">
                                </tbody>
                            </table>
                        </div>
                        <div id="urls"></div>


                        <div class="button-row button-row-script">
                            <i id="runBtn" class="fa fa-play fa-fw"></i>
                        </div>
                        <div id="comp-script" style="height: 400px"></div>
                        <!-- <div id="backups"></div> -->

                    </div>

                    <div id="consoleSection">
                        <div id="consoleScrollx">
                            <div id="console"></div>
                        </div>
                        <div id="consoleBtns">
                            <div id="consoleExpand"><i class="fa fa-window-maximize fa-fw"></i></div>
                            <div id="consoleClose"><i class="fa fa-window-minimize fa-fw"></i></div>
                        </div>
                    </div>
                </div>
            </div>
        </div>
    </div>
</body>


<div id="newUserModal" class="modal fade" role="dialog">
    <div class="modal-dialog modal-del-dialog">
        <nav class="modal-content">
            <div class="modal-header">
                <h4 class="modal-title">dsStack</h4>
            </div>

            <div id='newUserBody' class="modal-body">
                <p>Welcome to dsStack.<br><br>
                    dsStack is short for Data Science Stack. This is used to quickly and easily provision data science
                    related compute environments. Before running any scripts or entering commands into the console,
                    click the settings button to configure hostname, username and private SSH key.<br><br>
                    Please be aware that you should never enter your private SSH key into any web page unless you own
                    the backend server (you have exclusive root access) or the server belongs to someone you know and
                    trust and you are using a "throw-away" key.<br><br>
                    dsStack is Open Source so consider hosting your own application server for complete privacy and
                    independence.
                <p>
            </div>
            <div class="modal-footer">
                <button type="button" class="btn btn-default jobFormbtn" data-dismiss="modal">OK</button>
            </div>
        </nav>
    </div>
</div>

<div id="backupModal" class="modal fade" role="dialog">
    <div class="modal-dialog modal-del-dialog">
        <nav class="modal-content">
            <div class="modal-header">
                <!-- <h4 class="modal-title">dsStack</h4> -->
            </div>

            <div id='newUserBody' class="modal-body">

                <div id="comp-name-backup"></div>

                <div class="iCol-scroll">
                    <div id="dashCompDescription-backup"></div>
                    <div id="urls-backup"></div>

                    <div id="compVariablesForm-backup" class="form-group">
                        <label class="build-label">Component Properties</label>

                        <table class="table varTable">
                            <thead>
                                <tr class="d-flex">
                                    <th class="col-3 varLabel varLabelName">
                                        Name</th>
                                    <th class="col-2 varLabel varFlagLabels center">
                                        <div class="varFlagLabel varFlagLabel-pri">
                                            Pri</div>
                                        <div class="varFlagLabel varFlagLabel-ask">
                                            Ask</div>
                                    </th>

                                    <th class="col-2 varLabel center">Type
                                    </th>
                                    <th class="col-5 varLabel">Value</th>
                                </tr>
                            </thead>
                            <tbody id="compVariables-backup" class="varTbody">
                            </tbody>
                        </table>
                    </div>

                    <div id="comp-script-backup" style="height: 200px"></div>

                </div>
                <div class="modal-footer">
                    <button type="button" class="btn btn-default jobFormbtn" data-dismiss="modal">OK</button>
                </div>
        </nav>
    </div>
</div>

<div id="varEditModal" class="modal fade" role="dialog">
    <div class="modal-dialog modal-dialog-VarEdit">

        <nav class="modal-content varEditModal-modal-content">
            <div id='varEditBody' class="modal-body varEditModal-modal-body">
                <input id="varEditModalCurrentIdn" type="hidden">
                <br />
                <textarea id="varValEditor" class="varValEditorTextArea" name="content"></textarea>
            </div>
            <div class="modal-footer">
                <button type="button" class="btn btn-default jobFormbtn" data-dismiss="modal">Close</button>
            </div>
        </nav>
    </div>
</div>

<div id="delModal" class="modal fade" role="dialog">
    <div class="modal-dialog modal-del-dialog">
        <nav class="modal-content">
            <div class="modal-header">
                <h4 class="modal-title"><i class="fa fa-minus-square-o fa-fw"></i>Remove</h4>
            </div>

            <div id='delConfirmationBody' class="modal-body">
                Are you sure you want to remove this component and all children?
            </div>
            <div class="modal-footer">
                <button type="button" id="delConfirmButton" class="btn btn-default jobFormbtn">Remove</button>
                <button type="button" class="btn btn-default jobFormbtn" data-dismiss="modal">Cancel</button>
            </div>
        </nav>
    </div>
</div>

<div id="copyModal" class="modal fade" role="dialog">
    <div class="modal-dialog modal-run-dialog">
        <nav class="modal-content">
            <div class="modal-header">
                <h4 class="modal-title" id="moveModalTitle"><i class="fa fa-code-fork fa-fw"></i>Copy</h4>
            </div>
            <div id='copyConfirmationBody' class="modal-body">
                <div id="copyInfoText" class="text-info"></div>
                <form class="form" id="copyModalForm">
                    <div class="form-group">
                        <div class="radio" id="moveRadio">
                            <label class="build-label"><input name="moveCb" id="moveCb" value="no" type="checkbox"
                                    class="modalCheckBox" />move?</label>
                        </div>
                        <div id="copyChildrenRadioHolder">
                            <div class="radio" id="copyChildrenRadio">
                                <label class="build-label"><input name="copyChildrenCb" id="copyChildrenCb" value="yes"
                                        type="checkbox" class="modalCheckBox" />Copy all children?</label>
                            </div>
                        </div>
                    </div>
                </form>
                <br />

                <input type="hidden" id="copyModal_listOfIds">
                <input type="hidden" id="copyModal_newParent">
                <input type="hidden" id="copyModal_newPosition">
                <input type="hidden" id="copyModal_lib">
            </div>
            <div class="modal-footer">
                <button type="button" id="copyConfirmButton" class="btn btn-default jobFormbtn">Copy</button>
                <button type="button" class="btn btn-default jobFormbtn" data-dismiss="modal">Cancel</button>
            </div>
        </nav>
    </div>
</div>

<div id="settingsModal" class="modal fade" role="dialog">
    <div class="modal-dialog modal-run-dialog">
        <nav class="modal-content">
            <div class="modal-header">
                <h4 class="modal-title"><i class="fa fa-gear fa-fw"></i>Settings</h4>
            </div>
            <div id='settingsConfirmationBody' class="modal-body">
                <div id="settingsInfoText" class="text-info"></div>
                <form class="form" id="settingsModalForm">
                    <div class="settingsLn">
                        <div class="label settingsLabel">Your Name</div>
                        <div class="settingsInput"><input id="settingsYourName" type="text"></div>
                    </div>
                    <div class="settingsLn">
                        <div class="label settingsLabel">Login Name</div>
                        <div class="settingsInput"><input id="settingsLoginName1" type="text"></div>
                    </div>
                    <div class="settingsLn">
                        <div class="label settingsLabel">Host Name</div>
                        <div class="settingsInput"><input id="settingsHostName1" type="text"></div>
                    </div>
                    <div class="settingsLn">
                        <div class="label settingsLabel">Private Key</div>
                        <div class="settingsInput"><textarea id="settingsKey1"></textarea></div>
                    </div>
                    <div class="settingsLn">
                        <div class="label settingsLabel">User ID</div>
                        <div class="settingsInput"><textarea id="userID"></textarea>
                        </div>
                    </div>
                </form>
                <div id="settingsDownloadBtn" class="btn settingsDownloadBtn">Create Backup</div>
                <div id="settingsUploadBtn" class="btn settingsUploadBtn">Restore Backup</div>

                <div id="uploadFileLine"><input type="file" id="uploadFile"></div>
                <div id="settingMsg"></div>

                <br />
                <div class="label">Theme</div>
                <div id="stylePickMenu">
                    <span class="radio stylePickTop" data-id="default">
                        <label><input type="radio" id="defaultStyleRadioTop" name="setupRadio" checked><i
                                class='fa fa-sun-o fa-fw '></i></label>
                    </span>
                    <span class="radio stylePickTop" data-id="dark">
                        <label><input type="radio" id="darkStyleRadioTop" name="setupRadio"> <i
                                class='fa  fa-moon-o fa-fw '></i></label>
                    </span>
                </div>
                <!-- <div class="label">Save Host</div>
                    <div class="settingsInput"><input id="saveHost1"></textarea></div>
                    <div class="label">Save Path</div>
                    <div class="settingsInput"><input id="savePath1"></textarea></div> -->


                <br />
            </div>
            <div class="modal-footer">
                <button type="button" id="settingsSaveButton" data-dismiss="modal"
                    class="btn btn-default jobFormbtn">Save</button>
                <button type="button" id="settingsCloseButton" data-dismiss="modal"
                    class="btn btn-default jobFormbtn">Close</button>
            </div>
        </nav>
    </div>
</div>

<div id="runModal" class="modal fade" role="dialog">
    <div class="modal-dialog modal-run-dialog">
        <nav class="modal-content">
            <div class="modal-header">
                <h4 class="modal-title"><i class="fa fa-play fa-fw"></i>Run Script</h4>
            </div>
            <div id='runConfirmationBody' class="modal-body run-model-body">
                <form class="form">
                    <input name="idToBeRun" id="idToBeRun" type="hidden" />
                    <label id="buildModalTitleName"></label>
                    <div class="form-group" id="runChildrenGroup">
                        <span class="model-label"><input name="runChildrenCb" id="runChildrenCb" value="yes"
                                type="checkbox" checked />Run children?</span>
                    </div>
                </form>
            </div>

            <div class="modal-footer">
                <button type="button" id="runConfirmButton" class="btn btn-default jobFormbtn">Run</button>
                <button type="button" class="btn btn-default jobFormbtn" data-dismiss="modal">Cancel</button>
            </div>
        </nav>
    </div>
</div>

<div id="cantRunModal" class="modal fade" role="dialog">
    <div class="modal-dialog modal-run-dialog">
        <nav class="modal-content">
            <div class="modal-header">
                <h4 class="modal-title"><i class="fa fa-play fa-fw"></i>Run Script</h4>
            </div>
            <div id='cantRunConfirmationBody' class="modal-body run-model-body">
                <form class="form">
                    <label id="cantBuildMsg"></label>
                    <div><label id="cantBuildModalTitleName"></label></div>
                </form>
                <div class="modal-footer">
                    <button type="button" class="btn btn-default jobFormbtn" data-dismiss="modal">Cancel</button>
                </div>
            </div>
        </nav>
    </div>
</div>

<div id="alertModal" class="modal fade" role="dialog">
    <div class="modal-dialog modal-run-dialog">
        <nav class="modal-content">
            <div class="modal-header">
                <h4 class="modal-title"><i class="fa fa-comment fa-fw"></i>Server messages</h4>
            </div>
            <div class="modal-body run-model-body">
                <div id="msgText">

                </div>
                <div class="modal-footer">
                    <button type="button" class="btn btn-default jobFormbtn" data-dismiss="modal">OK</button>
                </div>
            </div>
        </nav>
    </div>
</div>
<div id="preformattedModal" class="modal fade" role="dialog">
    <div class="modal-dialog modal-run-dialog">
        <nav class="modal-content">
            <div class="modal-header">
                <h4 class="modal-title"><i class="fa fa-comment fa-fw"></i>Server messages</h4>
            </div>
            <div class="modal-body run-model-body">
                <pre id="pfText"></pre>

            </div>
            <div class="modal-footer">
                <button type="button" class="btn btn-default jobFormbtn" data-dismiss="modal">OK</button>
            </div>
    </div>
    </nav>
</div>
</div>


</html>