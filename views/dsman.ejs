<!doctype html>
<html lang="en">

<head>
    <meta charset="utf-8" />
    <link rel="icon" type="image/png" href="images/cybera_icon.png">
    <meta http-equiv="X-UA-Compatible" content="IE=edge,chrome=1" />

    <title>dsManager</title>

    <meta name="description" content="Home page for Data Science Manager">

    <!--     Fonts and icons     -->
    <link rel="stylesheet" href="https://fonts.googleapis.com/icon?family=Material+Icons" />
    <link rel="stylesheet" type="text/css" href="https://fonts.googleapis.com/css?family=Roboto:300,400,500,700" />

    <link rel="stylesheet" href="https://maxcdn.bootstrapcdn.com/font-awesome/latest/css/font-awesome.min.css" as="font"
        onload="this.onload=null;this.rel='stylesheet'">

    <!-- CSS Files -->

    <link rel="stylesheet" href="https://cdnjs.cloudflare.com/ajax/libs/twitter-bootstrap/4.5.3/css/bootstrap.min.css"
        integrity="sha512-oc9+XSs1H243/FRN9Rw62Fn8EtxjEYWHXRvjS43YtueEewbS6ObfXcJNyohjHqVKFPoXXUxwc+q1K7Dee6vv9g=="
        crossorigin="anonymous" />

    <script src="https://code.jquery.com/jquery-3.5.1.js" crossorigin="anonymous"></script>
    <script src="https://ajax.googleapis.com/ajax/libs/jqueryui/1.12.0/jquery-ui.min.js"></script>
    <script src="https://cdnjs.cloudflare.com/ajax/libs/jquery-awesome-cursor/0.3.1/jquery.awesome-cursor.min.js"
        integrity="sha512-mR4OOU/ky22CpIhlxfBwQ2ckKWapf+g2+1sbUCkVtFaaRcVLpytf0ERgrXXUUYgFOdbehWOJJdW7QzYJ7XlLiA=="
        crossorigin="anonymous"></script>

    <script src="https://cdnjs.cloudflare.com/ajax/libs/popper.js/1.12.9/umd/popper.min.js"></script>

    <script src="https://cdnjs.cloudflare.com/ajax/libs/twitter-bootstrap/4.5.3/js/bootstrap.min.js"
        integrity="sha512-8qmis31OQi6hIRgvkht0s6mCOittjMa9GMqtK9hes5iEQBQE/Ca6yGE5FsW36vyipGoWQswBj/QBm2JR086Rkw=="
        crossorigin="anonymous"></script>

    <!-- <script src="/jstree-3.3.15/dist/jstree.js"></script>
    <link rel="stylesheet" href="/jstree-3.3.15/dist/themes/default/style.min.css">

    <script src="https://www.unpkg.com/ace-builds@latest/src-noconflict/ace.js"></script>

    <script src="//cdn.quilljs.com/1.3.6/quill.min.js"></script>
    <link href="//cdn.quilljs.com/1.3.6/quill.snow.css" rel="stylesheet">-->

    <link rel="stylesheet" href="/xterm/xterm.css" />
    <script src="/xterm/xterm.js"></script>
    <script src="/xterm/xterm-addon-fit.js"></script>


    <script src="https://cdnjs.cloudflare.com/ajax/libs/gridjs/6.0.6/gridjs.production.min.js"
        integrity="sha512-wpiJjuL800CTEBA0QFs+RFw0tFtpXnQGea1p9S16WcYNXC1F3U0l1L7FQrDC3ihkYRtOj4Td7lKR3mYKxrwMMA=="
        crossorigin="anonymous" referrerpolicy="no-referrer"></script>

    <!-- <script>Grid.init();</script> -->

    <link rel="stylesheet" href="https://cdnjs.cloudflare.com/ajax/libs/gridjs/6.0.6/theme/mermaid.css"
        integrity="sha512-ibnRpUIPxMVyH/FKCXkBogJLSLNPbf+R6OStxW0LZCixqgbuAneGeTPuvtqi9rqSEoALv3T1Gu4aH4NYNUjvsg=="
        crossorigin="anonymous" referrerpolicy="no-referrer" />

    <!-- <script type="text/javascript"
        src="https://cdn.jsdelivr.net/npm/handsontable/dist/handsontable.full.min.js"></script>
    <link rel="stylesheet" href="https://cdn.jsdelivr.net/npm/handsontable/dist/handsontable.full.min.css" /> -->

    <!-- <link rel="stylesheet" type="text/css"
        href="https://cdn.jsdelivr.net/npm/handsontable-pro@latest/dist/handsontable.full.min.css">
    <link rel="stylesheet" type="text/css" href="https://handsontable.com/static/css/main.css"> -->

    <link rel="stylesheet" href="/clientCSS/dsman.css">


    <noscript>
        <link rel="stylesheet" href="/clientCSS/index.css">
    </noscript>

    <script type="text/javascript" language="javascript">

        $(document).ready(function () {
            var userID = "0"

            //settings
            if (localStorage['settings']) {
                let settings = JSON.parse(localStorage['settings'])
                $("#settingsYourName").val(settings.settingsYourName)
                $("#settingsHostName1").val(settings.settingsHostName1)
                $("#settingsLoginName1").val(settings.settingsLoginName1)
                $("#settingsKey1").val(settings.settingsKey1)
                $("#userID").val(settings.userID)
                userID = settings.userID

            } else {
                $('#newUserModal').modal('show')
            }
            $("#settingsBtn").on("click", function () {
                $('#settingsModal').modal('show');
                $("#settingMsg").text("")
                $("#uploadFile").val("")
                $("#uploadFileLine").css({ "display": "none" })

            })
            $("#settingsSaveButton").on("click", function () {
                let settings =
                {
                    "settingsYourName": $("#settingsYourName").val(),
                    "settingsHostName1": $("#settingsHostName1").val(),
                    "settingsLoginName1": $("#settingsLoginName1").val(),
                    "settingsKey1": $("#settingsKey1").val(),
                    "userID": $("#userID").val()
                }
                localStorage['settings'] = JSON.stringify(settings)
            })

            const { Grid, html } = gridjs;
            const grid = new gridjs.Grid({
                columns: [
                    {
                        id: 'ID',
                        name: 'ID',
                        hidden: true
                    },
                    {
                        id: 'Name',
                        name: 'Name',
                        width: '270px',
                        formatter: (cell, row) => html(`<div class="nameCell">${cell}</div>`)
                    },
                    {
                        id: 'Enabled',
                        name: 'En',
                        width: '50px',
                        formatter: (cell, row) =>
                            html(`<div class="enabledCell">${cell}</div>`)
                    },
                    {
                        id: 'Created_at',
                        name: 'Created',
                        width: '110px',
                        formatter: (cell, row) =>
                            html(`<div class="created_atCell">${cell}</div>`)
                    }
                ],
                data: [{ Name: '', ID: '' }],
                search: true,
                sort: true,
                style: {
                    table: {
                        border: '2px solid #ccc'
                    },
                    th: {
                        'text-align': 'center',
                        'padding': "0px"
                    },
                    td: {
                        'text-align': 'left',
                        'padding': "0 3px"
                    }
                }
            }).render(document.getElementById('grid'));

            grid.on('rowClick', (...args) => {
                let id = args[1].cells[0].data
                listClick(id)
                $(args[0].currentTarget).find(".gridjs-td").css({
                    "text-shadow": "rgb(141, 141, 141) 50px 5px 73px"
                })
                $(args[0].currentTarget).find(".gridjs-td").addClass(("clicked"))

            })

            function listClick(id) {
                runJob([onclickJob], false, { "id": id })
            }

            const lhost = location.host
            var ws = new WebSocket('wss://' + lhost);

            var pingTimeoutId
            function wsEvents(ws) {

                ws.addEventListener('open', function (e) {
                    ws.addEventListener('message', function (e) {

                        // console.log('received:', e.data);
                        if (e.data === "pong") {
                            console.log('received: pong');
                        } else {
                            const data = JSON.parse(e.data)
                            accessToken = data.token ? data.token : accessToken

                            if (data.busy) {
                                if (data.busy === "true") {
                                    $("#spinner").css({
                                        "opacity": "1"
                                    })
                                } else {
                                    $("#spinner").css({
                                        "opacity": "0"
                                    })
                                }
                            }
                            if (data.message) {
                                term.write(data.message)
                            }
                            if (data.status) {
                                if (data.status === "up") {
                                    $("#connectBtn").addClass("up").removeClass("down")
                                } else {
                                    $("#connectBtn").addClass("down").removeClass("up")
                                }
                            }
                            if (data.varName) {
                                const varName = data.varName
                                if (varName == "userList") {
                                    try {
                                        $("#spinner").css({
                                            "transition": "opacity .5s",
                                            "opacity": "0"
                                        })

                                        const varVal = JSON.parse(data.varVal)
                                        const compVars = data.compVars

                                        grid.updateConfig({
                                            columns: [
                                                {
                                                    id: 'ID',
                                                    name: 'ID',
                                                    hidden: true
                                                },
                                                {
                                                    id: 'Name',
                                                    name: 'Name',
                                                    width: '270px',
                                                    formatter: (cell, row) =>
                                                        html(`<div class="nameCell">${cell}</div>`)
                                                },
                                                {
                                                    id: 'Enabled',
                                                    name: 'En',
                                                    width: '50px',
                                                    formatter: (cell, row) =>
                                                        html(`<div class="enabledCell">${cell}</div>`)
                                                },
                                                {
                                                    id: 'Created_at',
                                                    name: 'Created',
                                                    width: '110px',
                                                    formatter: (cell, row) =>
                                                        html(`<div class="created_atCell">${cell}</div>`)
                                                }
                                            ],
                                            data: varVal.sort(function (a, b) {
                                                if (a.Created_at < b.Created_at) {
                                                    return 1;
                                                }
                                                if (a.Created_at > b.Created_at) {
                                                    return -1;
                                                }
                                                return 0;
                                            })
                                        }).forceRender();

                                        $("#userListSection").css({
                                            "transition": "opacity .5s",
                                            "opacity": "1"
                                        })

                                        const title = compVars["listTitle"] ? compVars["listTitle"].value : ""
                                        $("#gridTitle").text(title)
                                        $("#gridButtons").html('')

                                    } catch (e) {
                                        console.log("Error: " + e)
                                    }
                                }
                                if (varName == "userShow") {
                                    try {
                                        const varVal = JSON.parse(data.varVal)
                                        if (varVal.id) {
                                            let ele = $('#userShow-' + varVal.id)

                                            if (ele.length < 1) {
                                                ele = $("#userShowTemplateOuter").clone(false)
                                                ele.insertBefore("#spinner")
                                                ele.find(".userShow").removeClass("hidden")
                                                ele.attr('id', 'userShow-' + varVal.id)
                                            } else {
                                                // ele.insertBefore("#spinner")
                                                moveAnimate(ele, "#spinner")
                                            }

                                            let timeoutId = setTimeout(
                                                function () {
                                                    ele[0].scrollIntoView({
                                                        behavior: 'auto',
                                                        block: 'center',
                                                        inline: 'center'
                                                    });
                                                }, 800)

                                            ele.find(".userShowName").text(varVal.name)
                                            ele.find(".userShowEmail").text(varVal.email)
                                            ele.find(".userShowEnabled").text(varVal.enabled)
                                            ele.find(".userShowID").text(varVal.id)

                                        } else {
                                            ele.find(".userShowName").text("Error returned")
                                        }

                                    } catch (e) {
                                        console.log("Error: " + e)
                                    }
                                }
                                if (varName == "userProjectList") {
                                    try {
                                        const varVal = JSON.parse(data.varVal)
                                        const props = data.props
                                        const compVars = data.compVars
                                        const userid = props.id
                                        let userEle = $("#userShow-" + userid)

                                        userEle.find(".projectListLabel").text("Project List:")
                                        userEle.find(".projectListPanel").html()
                                        varVal.every((element, index, array) => {

                                            projshowid = compVars["projShowID"] ? compVars["projShowID"].value : ""
                                            userEle.find(".projectListPanel").append(
                                                '<div id="userProjRow">' +
                                                '<div id="userProj-' + userid + '-' + element.ID + '" class="userProj"></div>' +
                                                '<div id="userProjID-' + userid + '-' + element.ID + '"  data-projID="' + element.ID + '" class="userProj userProjID" data-runJob="' + projshowid + '"></div>' +
                                                '</div>'
                                            )
                                            $('#userProj-' + userid + '-' + element.ID).text(element.Name)
                                            $('#userProjID-' + userid + '-' + element.ID).text(element.ID)

                                            $('#userProjID-' + userid + '-' + element.ID).on("click", function (event) {
                                                let jobID = $(this).attr('data-runJob');
                                                let projID = $(this).attr('data-projID');
                                                runJob([jobID], false, { "id": projID })
                                            })

                                            return true
                                        });

                                    } catch (e) {
                                        console.log("Error: " + e)
                                    }
                                }
                                if (varName == "projectList") {
                                    try {

                                        const varVal = JSON.parse(data.varVal)

                                        const compVars = data.compVars

                                        grid.updateConfig({
                                            columns: [
                                                {
                                                    id: 'ID',
                                                    name: 'ID',
                                                    hidden: true
                                                },
                                                {
                                                    id: 'Name',
                                                    name: 'Name',
                                                    width: '270px',
                                                    formatter: (cell, row) =>
                                                        html(`<div class="nameCell">${cell}</div>`)
                                                },
                                                {
                                                    id: 'Enabled',
                                                    name: 'En',
                                                    width: '50px',
                                                    formatter: (cell, row) =>
                                                        html(`<div class="enabledCell">${cell}</div>`)
                                                },
                                                {
                                                    id: 'Created_at',
                                                    name: 'Created_at',
                                                    hidden: true
                                                }
                                            ],

                                            data: varVal.reverse()
                                        }).forceRender();

                                        $("#userListSection").css({
                                            "transition": "opacity .5s",
                                            "opacity": "1"
                                        })

                                        const title = compVars["listTitle"] ? compVars["listTitle"].value : ""

                                        $("#gridTitle").text(title)

                                        if (compVars["buttons"]) {
                                            bList = compVars["buttons"].value.split("\n")
                                            $("#gridButtons").html('')
                                            bList.every((element, index, array) => {
                                                if (element.split(";").length = 2) {
                                                    const icon = element.split(";")[0]
                                                    const jobId = element.split(";")[1]
                                                    let html = '<i id="listBtn-' + index + '" class="fa fa-' + icon + ' fa-fw listIcon" data-jobId="' + jobId + '">'
                                                    $("#gridButtons").append(html)

                                                    $("#listBtn-" + index).click(function () {
                                                        let ele

                                                        if ($("#projectCreate").length > 0) {
                                                            ele = $("#projectCreate")

                                                            ele.insertBefore("#spinner")
                                                        } else {
                                                            ele = $("#projectCreateTemplateOuter").clone(false)
                                                            ele.insertBefore("#spinner")
                                                            ele.find(".projectCreate").removeClass("hidden")
                                                            ele.attr('id', 'projectCreate')

                                                            ele.find(".projCreate").attr('data-jobId', jobId)
                                                            ele.find(".projCreate").click(function () {
                                                                let jobId = this.attributes["data-jobId"].value
                                                                let name = $(this).parent().find(".projectCreateInputName").val()
                                                                let email = $(this).parent().find(".projectCreateInputEmail").val()
                                                                let description = $(this).parent().find(".projectCreateInputDescription").val()
                                                                runJob([jobId], false, { "name": name, "email": email, "description": description })
                                                            })
                                                        }
                                                        ele[0].scrollIntoView({
                                                            behavior: 'auto',
                                                            block: 'center',
                                                            inline: 'center'
                                                        });


                                                    })
                                                }
                                                return true
                                            })
                                        }

                                    } catch (e) {
                                        console.log("Error: " + e)
                                    }
                                }
                                if (varName == "projectShow") {
                                    try {
                                        const varVal = JSON.parse(data.varVal)
                                        const compVars = data.compVars
                                        let ele
                                        if (varVal.id) {
                                            ele = $('#projectShow-' + varVal.id)
                                            if (ele.length < 1) {
                                                ele = $("#projectShowTemplateOuter").clone(false)
                                                ele.insertBefore("#spinner")
                                                ele.find(".projectShow").removeClass("hidden")
                                                ele.attr('id', 'projectShow-' + varVal.id)
                                            } else {
                                                // ele.insertBefore("#spinner")
                                                moveAnimate(ele, "#spinner")
                                            }

                                            let timeoutId = setTimeout(
                                                function () {
                                                    ele[0].scrollIntoView({
                                                        behavior: 'auto',
                                                        block: 'center',
                                                        inline: 'center'
                                                    });
                                                }, 800)


                                            ele.find(".projectShowName").text(varVal.name)
                                            ele.find(".projectShowDescription").text(varVal.description)
                                            ele.find(".projectShowEmail").text(varVal.email)
                                            ele.find(".projectShowEnabled").text(varVal.enabled)
                                            ele.find(".projectShowID").text(varVal.id)

                                        } else {
                                            ele.find(".projectShowName").text("Error returned")
                                        }

                                        if (compVars["buttons"]) {
                                            bList = compVars["buttons"].value.split("\n")
                                            ele.find(".projButtons").html('')
                                            bList.every((element, index, array) => {
                                                if (element.split(";").length === 2) {
                                                    const label = element.split(";")[0]
                                                    const jobId = element.split(";")[1]
                                                    let html = '<div id="projBtn-' + varVal.id + "-" + index + '" class="projButton" data-jobId="' + jobId + '"></div>'
                                                    ele.find(".projButtons").append(html)

                                                    $("#projBtn-" + varVal.id + "-" + index).text(label)
                                                    $("#projBtn-" + varVal.id + "-" + index).click(function () {
                                                        let jobId = this.attributes["data-jobId"].value
                                                        runJob([jobId], false, { "id": varVal.id })
                                                    })
                                                } else if (element.split(";").length === 3) {
                                                    const label = element.split(";")[0]
                                                    const jobId = element.split(";")[1]
                                                    const inputs = element.split(";")[2]

                                                    let html = '<div id="projBtn-' + varVal.id + "-" + index + '" class="projButton" data-jobId="' + jobId + '"></div>'
                                                    ele.find(".projButtons").append(html)

                                                    $("#projBtn-" + varVal.id + "-" + index).text(label)
                                                    $("#projBtn-" + varVal.id + "-" + index).click(function () {
                                                        let projEle = $("#projectShow-" + varVal.id)
                                                        let jobId = this.attributes["data-jobId"].value
                                                        let html = ''
                                                        let input

                                                        projEle.find(".projInputs").html('')
                                                        for (idx in inputs.split(",")) {
                                                            input = inputs.split(",")[idx]
                                                            html = '<div class="inputLabel">' + input + ':</div> <textarea id="projInput-' + input + "-" + varVal.id + '" class="projInput" data-jobId="' + jobId + '">'
                                                            projEle.find(".projInputs").append(html)
                                                        }
                                                        html = '<div id="projInputBtn-' + jobId + "-" + varVal.id + '" class="projInputBtn" >do</div>'
                                                        projEle.find(".projInputs").append(html)
                                                        $('#projInputBtn-' + jobId + "-" + varVal.id).click(function () {
                                                            let inputsObj = { "id": varVal.id }
                                                            for (idx in inputs.split(",")) {
                                                                inputsObj[inputs.split(",")[idx]] = $('#projInput-' + input + "-" + varVal.id).val()
                                                            }
                                                            runJob([jobId], false, inputsObj)

                                                        })

                                                    })
                                                }
                                                return true
                                            })
                                        }

                                    } catch (e) {
                                        console.log("Error: " + e)
                                    }
                                }
                                if (varName == "projectServerList") {
                                    try {
                                        const serverLists = JSON.parse(data.varVal)
                                        const varVal = serverLists[0]
                                        const varVal2 = serverLists[1]
                                        const props = data.props
                                        const serverid = props.id
                                        const compVars = data.compVars

                                        let projEle = $("#projectShow-" + serverid)

                                        projEle.find(".serverListLabel").text("Server List:")
                                        projEle.find(".serverListPanel").html('')

                                        function render(varVal, cloud) {
                                            varVal.every((element, index, array) => {

                                                servshowid = compVars["servshowid"] ? compVars["servshowid"].value : ""

                                                projEle.find(".serverListPanel").append(
                                                    '<div id="projectServRow">' +
                                                    '<div id="projectServ-' + serverid + '-' + element.ID + '" class="projectServ"></div>' +
                                                    // '<div id="projectServID-' + serverid + '-' + element.ID + '" class="projectServ projectServID"></div>' +
                                                    '<div id="projectServID-' + serverid + '-' + element.ID + '"  data-servID="' + element.ID + '" class="projectServ projectServID" data-runJob="' + servshowid + '"></div>' +
                                                    '</div>'
                                                )
                                                $('#projectServ-' + serverid + '-' + element.ID).text(cloud + " - " + element.Name)
                                                $('#projectServID-' + serverid + '-' + element.ID).text(element.ID)
                                                $('#projectServID-' + serverid + '-' + element.ID).on("click", function (event) {
                                                    let jobID = $(this).attr('data-runJob');
                                                    let servID = $(this).attr('data-servID');
                                                    runJob([jobID], false, { "id": servID })
                                                })
                                                return true
                                            });
                                        }
                                        render(varVal, "yyc")
                                        render(varVal2, "yeg")


                                    } catch (e) {
                                        console.log("Error: " + e)
                                    }
                                }
                                if (varName == "projectUserList") {
                                    try {
                                        const varVal = JSON.parse(data.varVal)
                                        const props = data.props

                                        const compVars = data.compVars
                                        const projectid = props.id
                                        let userEle = $("#projectShow-" + projectid)

                                        userEle.find(".userListLabel").text("User List:")
                                        userEle.find(".userListPanel").html()

                                        function render(varVal) {
                                            varVal.every((element, index, array) => {

                                                usershowid = compVars["userShowID"] ? compVars["userShowID"].value : ""
                                                userEle.find(".userListPanel").append(
                                                    '<div class="projectUserRow">' +
                                                    '<div id="projectUser-' + projectid + '-' + element.ID + '" class="projectUser"></div>' +
                                                    '<div id="projectUserID-' + projectid + '-' + element.ID + '" data-userID="' + element.ID + '" class="projectUser projectUserID" data-runJob="' + usershowid + '"></div>' +
                                                    '</div>'
                                                )
                                                $('#projectUser-' + projectid + '-' + element.ID).text(element.Name)
                                                $('#projectUserID-' + projectid + '-' + element.ID).text(element.ID)

                                                $('#projectUserID-' + projectid + '-' + element.ID)[0].scrollIntoView({
                                                    behavior: 'auto',
                                                    block: 'center',
                                                    inline: 'center'
                                                });

                                                $('#projectUserID-' + projectid + '-' + element.ID).on("click", function (event) {
                                                    let jobID = $(this).attr('data-runJob')
                                                    let userID = $(this).attr('data-userID')
                                                    runJob([jobID], false, { "id": userID })
                                                })
                                                return true
                                            })
                                        }
                                        render(varVal)


                                    } catch (e) {
                                        console.log("Error: " + e)
                                    }
                                }
                                if (varName == "createProj") {
                                    try {
                                        const ret = data.varVal

                                        var myString = '<p class="preformatted"></p>';
                                        var createProjRet = $($.parseHTML(myString));
                                        createProjRet.insertBefore("#spinner")
                                        createProjRet.text(ret)

                                        createProjRet.scrollIntoView({
                                            behavior: 'auto',
                                            block: 'center',
                                            inline: 'center'
                                        });

                                    } catch (e) {
                                        console.log("Error: " + e)
                                    }
                                }
                                if (varName == "preformatted") {
                                    try {
                                        const ret = data.varVal

                                        var myString = '<p class="preformatted"></p>';
                                        var preformattedRet = $($.parseHTML(myString));
                                        preformattedRet.insertBefore("#spinner")
                                        preformattedRet.text(ret)

                                        let timeoutId = setTimeout(
                                            function () {
                                                preformattedRet[0].scrollIntoView({
                                                    behavior: 'auto',
                                                    block: 'center',
                                                    inline: 'center'
                                                });
                                            }, 800)

                                    } catch (e) {
                                        console.log("Error: " + e)
                                    }
                                }
                                if (varName == "json") {
                                    try {
                                        const varVal = JSON.parse(data.varVal)

                                        var myString = '<div class="json"></div>';
                                        var jsonRet = $($.parseHTML(myString));
                                        jsonRet.insertBefore("#spinner")
                                        function buildKeyLine(obj) {

                                            let block = $(`<div class="jsonBlock"></div>`)
                                            jsonRet.append(block)
                                            for (const key in obj) {
                                                if (typeof obj[key] === 'object' && !Array.isArray(obj[key]) && obj[key] !== null) {
                                                    buildKeyLine(obj[key])
                                                } else {
                                                    block.append(`<div class="jsonItem"><div class="jsonKey">${key}:</div><div class="jsonVal">${obj[key]}</div></div>`)
                                                }
                                            }
                                            jsonRet.append(`</div>`)
                                        }
                                        buildKeyLine(varVal)


                                        let timeoutId = setTimeout(
                                            function () {
                                                jsonRet[0].scrollIntoView({
                                                    behavior: 'auto',
                                                    block: 'center',
                                                    inline: 'center'
                                                });
                                            }, 800)

                                    } catch (e) {
                                        console.log("Error: " + e)
                                    }
                                }
                            }

                        }
                    })
                })

                ws.onclose = function (e) {
                    clearTimeout(pingTimeoutId)
                    console.log("ws closed")
                    $("#connectBtn").addClass("down").removeClass("up")
                };
            }
            wsEvents(ws)

            function pingpong() {
                pingTimeoutId = setTimeout(
                    function () {
                        ws.send("ping")
                        pingpong()
                    }, 1000 * 10)
            }
            pingpong()

            function moveAnimate(element, insertBeforeEle) {
                insertBeforeEle = $(insertBeforeEle);

                var oldOffset = element.offset();
                element.insertBefore(insertBeforeEle);
                var newOffset = element.offset();

                var temp = element.clone().appendTo('body');
                temp.css({
                    'position': 'absolute',
                    'left': oldOffset.left,
                    'top': oldOffset.top,
                    'z-index': 1000
                });
                element.hide();
                temp.animate({ 'top': newOffset.top, 'left': newOffset.left }, 'slow', function () {
                    element.show();
                    temp.remove();
                });
            }

            var accessToken = ""
            function runJob(ids, runChildren, props) {

                var settings
                if (localStorage['settings']) {
                    settings = JSON.parse(localStorage['settings'])
                } else {
                    console.log("ERROR: Local storage 'Settings' not found")
                    return (1)
                }
                var runData = {}

                runData["runChildren"] = runChildren
                runData["ids"] = ids
                settingsHostName = settings.settingsHostName1 ? settings.settingsHostName1 : ""
                settingsLoginName = settings.settingsLoginName1 ? settings.settingsLoginName1 : ""
                settingsYourName = settings.settingsYourName ? settings.settingsYourName : ""

                settingsKey = settings.settingsKey1 ? settings.settingsKey1 : ""
                runData["settingsHostName"] = settingsHostName
                runData["settingsLoginName"] = settingsLoginName
                runData["settingsYourName"] = settingsYourName
                runData["settingsKey"] = settingsKey
                runData["token"] = accessToken
                runData["userID"] = userID
                runData["props"] = props ? props : {}

                if (isWsOpen(ws)) {
                    // term.write("connecting....\r\n")
                    wsSend(runData, ws)
                } else {
                    term.write("reconnecting....\r\n")
                    accessToken = ""
                    runData["token"] = ""
                    const lhost = location.host
                    ws = new WebSocket('wss://' + lhost);
                    wsEvents(ws)
                    setTimeout(function () {
                        wsSend(runData, ws)
                    }, 2000)
                }

                
            }

            $("#connectBtn").click(function (event) {
                //     term.focus()
                if (isWsOpen(ws)) {
                    term.write("connecting....\r\n")
                    runJob([], false)
                } else {
                    term.write("reconnecting....\r\n")
                    accessToken = ""
                    runData["token"] = ""
                    const lhost = location.host
                    ws = new WebSocket('wss://' + lhost);
                    wsEvents(ws)
                    setTimeout(function () {
                        wsSend(runData, ws)
                    }, 2000)
                }


            });
            $("#connectBtn").popover('dispose').popover({
                animation: true,
                content: "Connect to host",
                delay: { "show": 500, "hide": 100 },
                trigger: 'hover',
                placement: 'top',
                template: '<div class="popover hoverPop" role="tooltip"><div class="arrow hoverPopArrow"></div><h3 class="popover-header"></h3><div class="popover-body"></div></div>'
            });

            // https://stackoverflow.com/questions/31002592/javascript-doesnt-catch-error-in-websocket-instantiation
            // ws.onclose = function (e) {
            //     $("#connectBtn").addClass("up").removeClass("down")
            // };

            var term = new Terminal({
                fontSize: 14,
                cols: 80,
                fontFamily: 'Ubuntu Mono, courier-new, courier, monospace',
            });

            const fitAddon = new FitAddon.FitAddon();
            term.loadAddon(fitAddon);

            term.open(document.getElementById('console'));

            fitAddon.fit();


            term.write('Welcome to \x1B[1;3;31mdsMan\x1B[0m $ ')

            termLightTheme = {
                "foreground": "#53676d",
                "background": "#ebebeb",
                "cursorColor": "#3a4d53",
                "selectionBackground": "#cfcebe",
                "black": "#e9e4d0",
                "red": "#d2212d",
                "green": "#489100",
                "yellow": "#ad8900",
                "blue": "#0072d4",
                "purple": "#ca4898",
                "cyan": "#009c8f",
                "white": "#909995",
                "brightBlack": "#cfcebe",
                "brightRed": "#cc1729",
                "brightGreen": "#428b00",
                "brightYellow": "#a78300",
                "brightBlue": "#006dce",
                "brightPurple": "#c44392",
                "brightCyan": "#00978a",
                "brightWhite": "#3a4d53",
                "cursor": "#3a4d53"
            }

            termDarkTheme = {
                "foreground": "#bbb",
                "background": "#000",
                "cursorColor": "#fff",
                "selectionBackground": "#cfcebe",
                "black": "#e9e4d0",
                "red": "#d2212d",
                "green": "#489100",
                "yellow": "#ad8900",
                "blue": "#0072d4",
                "purple": "#ca4898",
                "cyan": "#009c8f",
                "white": "#909995",
                "brightBlack": "#cfcebe",
                "brightRed": "#cc1729",
                "brightGreen": "#428b00",
                "brightYellow": "#a78300",
                "brightBlue": "#006dce",
                "brightPurple": "#c44392",
                "brightCyan": "#00978a",
                "brightWhite": "#3a4d53",
                "cursor": "#3a4d53"
            }

            term.options = {
                fontSize: 13,
                fontWeight: 200,
                fontFamily: 'Menlo, Consolas, "Liberation Mono", Courier, monospace',
                cursorBlink: false,
                enableBold: false
            }
            term.options.theme = termLightTheme

            term.onSelectionChange(() => {
                let selectedText = term.getSelection()
                var obj = {
                    start: 0,
                    end: selectedText.length,
                    text: selectedText
                }
                navigator.clipboard.writeText(selectedText);
            })

            $('#console').on('mouseenter', function () {
                $("#console").css({
                    "height": 'calc(400px)',
                    "transition": "height .5s swing"
                })
                timeoutId = setTimeout(

                    function () {
                        fitAddon.fit()
                    }, 1100)
            })
            $('#console').on('mouseleave', function () {
                $("#console").css({
                    "height": 'calc(40px)',
                    "transition": "height .5s swing"
                })
                timeoutId = setTimeout(

                    function () {
                        fitAddon.fit()
                    }, 600)
            })

            // $("#wrapBtn").click(function (event) {
            //     term.focus()
            //     if (!$("div#console").hasClass("consoleWrap")) {
            //         $("div#console").addClass("consoleWrap")
            //         $("#wrapBtn").addClass("consoleWrapBtn")
            //         fitAddon.fit();
            //     } else {
            //         $("div#console").removeClass("consoleWrap")
            //         $("#wrapBtn").removeClass("consoleWrapBtn")
            //         fitAddon.fit();
            //     }
            // });

            term.attachCustomKeyEventHandler((key) => {
                if (key.code === 'KeyV') {
                    if (key.metaKey) {
                        $("#console").focus()

                        navigator.clipboard
                            .readText()
                            .then(
                                (clipText) => {
                                    let sendObj = { "token": accessToken, "key": clipText }
                                    wsSend(sendObj, ws)
                                }

                            )
                    }
                }
                return true;
            });

            term.onKey((key, ev) => {

                var settings
                if (localStorage['settings']) {
                    settings = JSON.parse(localStorage['settings'])
                } else {
                    console.log("ERROR: Local storage 'Settings' not found")
                    return (1)
                }

                // if (ws) {
                    settingsYourName = settings.settingsYourName ? settings.settingsYourName : ""
                    let sendObj = { "token": accessToken, "key": key.key, "settingsYourName":settingsYourName }
                    wsSend(sendObj, ws)
                // }
                // console.log("keypress " + key)

            });
            function isWsOpen(ws) { 
                return ws.readyState === ws.OPEN || false
            }
            function wsSend(sendObj, ws) {
                if (isWsOpen(ws)) {
                    ws.send(JSON.stringify(sendObj))
                } else {
                    console.log("ws is not open")
                    term.write("Not connected\r\n")
                    $("#connectBtn").addClass("down").removeClass("up")
                }
            }

            currentStyleName = localStorage['theme'] ? localStorage['theme'] : 'default'

            if (currentStyleName === "dark") {
                $("#darkStyleRadioTop").prop('checked', true)
                setStyle(currentStyleName)
            } else {
                $("#defaultStyleRadioTop").prop('checked', true)
                setStyle(currentStyleName)
            }

            $('.stylePickTop').on('click', function (evt) {
                //evt.preventDefault();
                var pickedStyle = $(this).attr('data-ID')
                setStyle(pickedStyle);

                if (pickedStyle === "dark") {

                } else {

                }


                localStorage['theme'] = pickedStyle
            });

            //Apply Style
            function setStyle(name) {
                const styleName = name;

                currentStyleName = styleName;
                setEditorsStyle(styleName);

                var mydata = { styleName: styleName };

                $.ajax({
                    type: 'get',
                    data: mydata,
                    dataType: "text",
                    headers: {
                        "content-type": "application/json"
                    },
                    url: '/getStyle',
                    success: function (data) {
                        var sheet;
                        if (lastStyleSheet) {
                            sheet = lastStyleSheet;
                        } else {
                            sheet = document.createElement('style');
                            document.body.appendChild(sheet);
                        }
                        lastStyleSheet = sheet;

                        const respJson = JSON.parse(data);
                        cssUnsortTxt = respJson.css;
                        var cssArr = cssUnsortTxt.split("}")
                        shuffleArray(cssArr);
                        cssTxt = cssArr.join("}");

                        loadCssParts(0, lastStyleSheet);
                    },
                    error: function (error) {
                        console.log(error)
                    }
                })

            }

            function shuffleArray(array) {
                for (let i = array.length - 1; i > 0; i--) {
                    const j = Math.floor(Math.random() * (i + 1));
                    [array[i], array[j]] = [array[j], array[i]];
                }
            }

            function setEditorsStyle(styleName) {
                if (styleName === "dark") {
                    term.options.theme = termDarkTheme
                } else {
                    term.options.theme = termLightTheme
                }
            }

            $('#grid').on('mouseenter', function () {
                $("#grid").css({
                    "width": ($("table.gridjs-table").width() + 25) + 'px'
                })

            })
            $('#grid').on('mouseleave', function () {
                $("#grid").css({
                    "width": 'calc(290px)'
                })
            })

            var onclickJob = ""
            $.get('/getPromoted', { "userID": userID }, function (data) {
                if (data.length > 0) {
                    data.every((element, index, array) => {

                        let text = element.text && element.text !== "" ? element.text : "click"
                        let icon = element.icon && element.icon !== "" ? element.icon : "users"
                        let ocj = element.onclickJob && element.onclickJob !== "" ? element.onclickJob : ""

                        btnHtml = '<div id="btn-' + element.id + '" class="btnHolder" data-target="' + element.id + '" data-listClickJob="' + element.onclickJob + '" title="">'
                        btnHtml += '<i class="fa fa-' + icon + ' fa-fw leftBtns"></i>'
                        btnHtml += '</div>'

                        $("#btnCol").append(btnHtml)

                        $('#btn-' + element.id).on('click', function () {
                            // console.log("user list clicked")
                            if (ocj !== "") { onclickJob = ocj }

                            runJob([element.id], false)
                        })

                        $('#btn-' + element.id).popover('dispose').popover({
                            animation: true,
                            content: text,
                            delay: { "show": 500, "hide": 100 },
                            trigger: 'hover',
                            placement: 'right',
                            template: '<div class="popover hoverPop" role="tooltip"><div class="arrow hoverPopArrow"></div><h3 class="popover-header"></h3><div class="popover-body"></div></div>'
                        });

                        return true
                    })



                }
            })

            function downloadSettings() {

                let settingsArr = []

                settingsArr.push({ "yourName": $("#settingsYourName").val() })
                settingsArr.push({ "hostName1": $("#settingsHostName1").val() })
                settingsArr.push({ "loginName1": $("#settingsLoginName1").val() })
                settingsArr.push({ "key1": $("#settingsKey1").val() })
                settingsArr.push({ "userID": $("#userID").val() })

                var file = new File([JSON.stringify(settingsArr)], "ds_backup.txt", {
                    type: "text/plain",
                });

                const link = document.createElement('a')
                const url = URL.createObjectURL(file)

                link.href = url
                link.download = file.name
                document.body.appendChild(link)
                link.click()

                document.body.removeChild(link)
                window.URL.revokeObjectURL(url)
            }

            $("#settingsDownloadBtn").click(function (e) {
                downloadSettings()
            })

            $("#settingsUploadBtn").click(function (e) {
                $("#uploadFileLine").css({ "display": "block" })
            })

            const $file = document.getElementById('uploadFile')
            const fetchFile = async e => {
                const [file] = e.target.files
                if ([file]) {
                    const text = await file.text()
                    try {
                        const settings = JSON.parse(text)

                        for (ln in settings) {
                            if (settings[ln].yourName) { $("#settingsYourName").val(settings[ln].yourName) }
                            if (settings[ln].hostName1) { $("#settingsHostName1").val(settings[ln].hostName1) }
                            if (settings[ln].loginName1) { $("#settingsLoginName1").val(settings[ln].loginName1) }
                            if (settings[ln].key1) { $("#settingsKey1").val(settings[ln].key1) }
                            if (settings[ln].userID) { $("#userID").val(settings[ln].userID) }
                            $("#settingMsg").text("Settings have been restored. Click save to save changes.")
                        }
                    } catch (error) {
                        alert("Error: Cannot parse settings backup")
                    }
                }

            }

            $file.onchange = fetchFile


        });

        var cssTxt = "";
        var cssUnsortTxt = "";
        var currentStyleName = ""
        var lastStyleSheet

        function loadCssParts(part, sheet) {

            var cssTxtPart = cssTxt.split("}")[part]
            var totRows = cssTxt.split("}").length
            if (totRows > part) {
                sheet.innerHTML += cssTxtPart + "}"
                setTimeout('loadCssParts(' + (part + 1).toString() + ', lastStyleSheet)', 500 / totRows);
            } else {
                sheet.innerHTML = "";
                sheet.innerHTML = cssUnsortTxt
            }
        }

    </script>
</head>


<body class="index-page">
    <div id="navbarNav-outer">

        <nav id="navbarNav" class="navbar navbar-light pop-bar">
            <span>
                <a class="navbar-brand" href="/"><b><span id="navTitle">dsManager</span></b></a>
            </span>

            <!-- <div id="stylePickMenu">
                <span class="radio stylePickTop" data-id="default">
                    <label><input type="radio" id="defaultStyleRadioTop" name="setupRadio" checked><i
                            class='fa fa-sun-o fa-fw '></i></label>
                </span>
                <span class="radio stylePickTop" data-id="dark">
                    <label><input type="radio" id="darkStyleRadioTop" name="setupRadio"> <i
                            class='fa  fa-moon-o fa-fw '></i></label>
                </span>
            </div> -->
            <div class="navbarNavBtnRow">
                <i id="connectBtn" class="fa fa-power-off fa-fw"></i>
                <i id="settingsBtn" class="fa fa-gear fa-fw"></i>
            </div>
        </nav>
    </div>

    <div id="MainRaisedCol" class="wrapper scroller">

        <div class="main">
            <div id="btnCol">
                <!-- <div id="userListBtn" class="btnHolder"><i class="fa fa-users fa-fw leftBtns"></i></div>
                <div id="projectListBtn" class="btnHolder"><i class="fa fa-briefcase fa-fw leftBtns"></i></div> -->
            </div>

            <div id="mainCol">
                <!-- <div id="userBtnRow">
                    <div id="userListBtn" class="usertBtn">User List</div>
                </div> -->
                <div id="Manager" class="manager">
                    <div id="userList">
                        <div id="userListSection">
                            <!-- <div id="buildCodeSearchRow">
                                <input class="form-control searchInput buildCodeSearchInput" id="buildCodeSearchInput"
                                    type="text">
                            </div> -->
                            <div id="gridTitleRow">
                                <div id="gridTitle"></div>
                                <div id="gridButtons"></div>&nbsp;
                            </div>
                            <div id="grid"></div>
                        </div>

                    </div>

                    <div id="workingSection">
                        <div id="managerPanels">
                            <i id='spinner' class="fa fa-spinner fa-pulse fa-3x fa-fw"></i>
                        </div>
                        <div id="consoleScrollx">
                            <div id="console"></div>
                        </div>

                    </div>

                </div>
            </div>


        </div>
    </div>
</body>

<div id="settingsModal" class="modal fade" role="dialog">
    <div class="modal-dialog modal-run-dialog">
        <nav class="modal-content">
            <div class="modal-header">
                <h4 class="modal-title"><i class="fa fa-gear fa-fw"></i>Settings</h4>
            </div>
            <div id='settingsConfirmationBody' class="modal-body">
                <div id="settingsInfoText" class="text-info"></div>
                <form class="form" id="settingsModalForm">
                    <div class="settingsLn">
                        <div class="label settingsLabel">Your Name</div>
                        <div class="settingsInput"><input id="settingsYourName" type="text"></div>
                    </div>
                    <div class="settingsLn">
                        <div class="label settingsLabel">Login Name</div>
                        <div class="settingsInput"><input id="settingsLoginName1" type="text"></div>
                    </div>
                    <div class="settingsLn">
                        <div class="label settingsLabel">Host Name</div>
                        <div class="settingsInput"><input id="settingsHostName1" type="text"></div>
                    </div>
                    <div class="settingsLn">
                        <div class="label settingsLabel">Private Key</div>
                        <div class="settingsInput"><textarea id="settingsKey1"></textarea></div>
                    </div>
                    <div class="settingsLn">
                        <div class="label settingsLabel">User ID</div>
                        <div class="settingsInput"><textarea id="userID"></textarea>
                        </div>
                    </div>

                </form>
                <div id="settingsDownloadBtn" class="btn settingsDownloadBtn">Create Backup</div>
                <div id="settingsUploadBtn" class="btn settingsUploadBtn">Restore Backup</div>

                <div id="uploadFileLine"><input type="file" id="uploadFile"></div>
                <div id="settingMsg"></div>
                <br />
                <div class="label">Theme</div>
                <div id="stylePickMenu">
                    <span class="radio stylePickTop" data-id="default">
                        <label><input type="radio" id="defaultStyleRadioTop" name="setupRadio" checked><i
                                class='fa fa-sun-o fa-fw '></i></label>
                    </span>
                    <span class="radio stylePickTop" data-id="dark">
                        <label><input type="radio" id="darkStyleRadioTop" name="setupRadio"> <i
                                class='fa  fa-moon-o fa-fw '></i></label>
                    </span>
                </div>
            </div>
            <div class="modal-footer">
                <button type="button" id="settingsSaveButton" data-dismiss="modal"
                    class="btn btn-default jobFormbtn">Save</button>
                <button type="button" id="settingsCloseButton" data-dismiss="modal"
                    class="btn btn-default jobFormbtn">Close</button>
            </div>
        </nav>
    </div>
</div>

<div id="userShowTemplateOuter" class="userShowOuter">
    <div class="userShow hidden">
        <div class="nameRow">
            <div class="userShowLabel">User:</div>
            <div class="userShowName"></div>
        </div>
        <div class="userShowInfo">
            <div class="panelTop">
                <div class="panelLCol">
                    <!-- <div class="panelRow">
                </div> -->
                    <div class="panelRow">
                        <div class="infoPanelLabel">Enabled: </div>
                        <div class="infoPanel userShowEnabled"></div>
                    </div>
                    <div class="panelRow">
                        <div class="infoPanelLabel">Email: </div>
                        <div class="infoPanel userShowEmail"></div>
                    </div>
                    <div class="panelRow">
                        <div class="infoPanelLabel">ID: </div>
                        <div class="infoPanel userShowID"></div>
                    </div>
                </div>
                <!-- <div class="panelRCol">
            </div> -->
            </div>
            <div class="infoPanel projectListHolder">
                <div class="infoPanel projectListLabel"></div>
                <div class="infoPanel projectListPanel"></div>
            </div>
        </div>
    </div>
</div>

<div id="projectShowTemplateOuter" class="projectShowOuter">
    <div class="projectShow hidden">
        <div class="nameRow">
            <div class="projectShowLabel">Project:</div>
            <div class="projectShowName"></div>
        </div>
        <div class="projectShowInfo">
            <div class="panelTop">
                <div class="panelLCol">
                    <!-- <div class="panelRow">
                </div> -->
                    <div class="panelRow">
                        <div class="infoPanelLabel">Enabled: </div>
                        <div class="infoPanel projectShowEnabled"></div>
                    </div>
                    <div class="panelRow">
                        <div class="infoPanelLabel">Email: </div>
                        <div class="infoPanel projectShowEmail"></div>
                    </div>
                    <div class="panelRow">
                        <div class="infoPanelLabel">Description: </div>
                        <div class="infoPanel projectShowDescription"></div>
                    </div>
                    <div class="panelRow">
                        <div class="infoPanelLabel">ID: </div>
                        <div class="infoPanel projectShowID"></div>
                    </div>
                    <div class="panelRow userListHolder">
                        <div class="infoPanel userListLabel"></div>
                        <div class="infoPanel userListPanel"></div>
                    </div>
                </div>
                <!-- <div class="panelRCol">
            </div> -->
            </div>
            <div class="infoPanel serverListHolder">
                <div class="infoPanel serverListLabel"></div>
                <div class="infoPanel serverListPanel"></div>
            </div>
        </div>
        <div class="projButtons"></div>
        <div class="projInputs"></div>
    </div>
</div>

<div id="projectCreateTemplateOuter" class="projectCreateOuter">
    <div class="projectCreate hidden">
        <div class="projectCreateRow">
            <div class="projectCreateRowLabel">Project Name: </div><input class="projectCreateInputName" type="text">
            <div class="projectCreateRowLabel">Project Email: </div><input class="projectCreateInputEmail" type="text">
        </div>
        <div class="projectCreateRow2">
            <div class="projectCreateRowLabel">Project Description: </div><input class="projectCreateInputDescription"
                type="text">
        </div>
        <div class="projCreate">Create Project</div>
    </div>
</div>
<div id="projectAddUsersTemplateOuter" class="projectAddUsersOuter">
    <div class="projectAddUsers hidden">
        <div class="projectAddUsersRow">
            <div class="projectAddUsersRowLabel">Project Name: </div><input class="projectAddUsersTextbox" type="text">
        </div>
        <div class="projCreate">Add Users</div>
    </div>
</div>

</html>